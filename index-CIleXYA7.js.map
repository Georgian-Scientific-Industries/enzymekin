{"version":3,"file":"index-CIleXYA7.js","sources":["../src/js/simulation/SimulationEngine.js","../src/js/simulation/EnzymeKineticsSimulator.js","../src/js/rendering/MolecularRenderer.js","../src/js/rendering/PlotRenderer.js","../src/js/analysis/VelocityProfileGenerator.js","../src/js/main.js"],"sourcesContent":["/**\n * Michaelis-Menten Enzyme Kinetics Simulation Engine\n * \n * Implements the mathematical models specified in guidelines/structure.md:\n * - Michaelis-Menten equation with inhibition models\n * - Complete ODE system with Runge-Kutta 4th order integration\n * - Unit consistency: Enzyme (μM), Substrate/Product (mM), Velocity (μM·s⁻¹)\n */\n\nexport class SimulationEngine {\n    constructor() {\n        // Default kinetic constants from structure.md\n        this.parameters = {\n            km: 2.0,        // mM - Michaelis constant\n            kcat: 100,      // s⁻¹ - catalytic rate constant\n            ki: 1.0,        // mM - inhibition constant\n            \n            // Rate constants for detailed mechanism (more reasonable values)\n            k1: 1.0,        // mM⁻¹s⁻¹ - enzyme-substrate association (reduced)\n            kMinus1: 100,   // s⁻¹ - enzyme-substrate dissociation\n            k2: 100         // s⁻¹ - catalytic rate (same as kcat)\n        };\n\n        // Current concentrations\n        this.state = {\n            substrate: 5.0,           // [S] in mM\n            enzyme: 0.1,              // [E]₀ in μM\n            product: 0.0,             // [P] in mM\n            enzymeSubstrateComplex: 0.0,  // [ES] in μM\n            inhibitor: 0.0,           // [I] in mM\n            enzymeInhibitorComplex: 0.0,  // [EI] in μM (competitive)\n            enzymeSubstrateInhibitorComplex: 0.0, // [ESI] in μM (uncompetitive)\n            freeEnzyme: 0.1           // [E] free enzyme in μM\n        };\n\n        // Simulation parameters\n        this.time = 0.0;\n        this.timeStep = 0.01;       // 10 ms steps for accuracy\n        this.inhibitionType = 'none';\n        this.isRunning = false;\n\n        // Data logging for plots\n        this.dataLog = {\n            time: [],\n            substrate: [],\n            product: [],\n            enzymeSubstrateComplex: [],\n            velocity: []\n        };\n\n        this.clearDataLog();\n    }\n\n    /**\n     * Calculate current reaction velocity using Michaelis-Menten equation with inhibition\n     * Returns velocity in μM·s⁻¹\n     */\n    calculateVelocity() {\n        const S = this.state.substrate;  // mM\n        const I = this.state.inhibitor;  // mM\n        const E0 = this.state.enzyme;    // μM\n        \n        // Calculate Vmax = kcat × [E]₀ (μM·s⁻¹)\n        const Vmax = this.parameters.kcat * E0;\n        \n        let velocity = 0;\n\n        switch (this.inhibitionType) {\n            case 'competitive':\n                // v = (Vmax × [S]) / (Km × (1 + [I]/Ki) + [S])\n                const KmApp_comp = this.parameters.km * (1 + I / this.parameters.ki);\n                velocity = (Vmax * S) / (KmApp_comp + S);\n                break;\n\n            case 'uncompetitive':\n                // v = (Vmax × [S]) / (Km + [S] × (1 + [I]/Ki))\n                const inhibitionFactor_uncomp = 1 + I / this.parameters.ki;\n                velocity = (Vmax * S) / (this.parameters.km + S * inhibitionFactor_uncomp);\n                break;\n\n            case 'noncompetitive':\n                // v = (Vmax × [S]) / ((Km + [S]) × (1 + [I]/Ki))\n                const inhibitionFactor_noncomp = 1 + I / this.parameters.ki;\n                velocity = (Vmax * S) / ((this.parameters.km + S) * inhibitionFactor_noncomp);\n                break;\n\n            case 'none':\n            default:\n                // Standard Michaelis-Menten: v = (Vmax × [S]) / (Km + [S])\n                velocity = (Vmax * S) / (this.parameters.km + S);\n                break;\n        }\n\n        return velocity;\n    }\n\n    /**\n     * Calculate apparent Km based on inhibition type\n     */\n    getApparentKm() {\n        const I = this.state.inhibitor;\n        \n        switch (this.inhibitionType) {\n            case 'competitive':\n                return this.parameters.km * (1 + I / this.parameters.ki);\n            case 'uncompetitive':\n                return this.parameters.km / (1 + I / this.parameters.ki);\n            case 'noncompetitive':\n            case 'none':\n            default:\n                return this.parameters.km;\n        }\n    }\n\n    /**\n     * Calculate apparent Vmax based on inhibition type\n     */\n    getApparentVmax() {\n        const I = this.state.inhibitor;\n        const baseVmax = this.parameters.kcat * this.state.enzyme;\n        \n        switch (this.inhibitionType) {\n            case 'competitive':\n                return baseVmax; // Vmax unchanged\n            case 'uncompetitive':\n            case 'noncompetitive':\n                return baseVmax / (1 + I / this.parameters.ki);\n            case 'none':\n            default:\n                return baseVmax;\n        }\n    }\n\n    /**\n     * ODE system for detailed enzyme kinetics mechanism\n     * Returns derivatives [dES/dt, dP/dt, dS/dt]\n     */\n    calculateDerivatives(state) {\n        const { substrate: S, enzymeSubstrateComplex: ES, freeEnzyme: E } = state;\n        const { k1, kMinus1, k2 } = this.parameters;\n\n        // Keep consistent units: S in mM, E and ES in μM\n        // Rate constants: k1 in mM⁻¹s⁻¹, k-1 and k2 in s⁻¹\n        \n        // d[ES]/dt = k1[E][S] - (k-1 + k2)[ES]\n        // Note: k1 needs to be scaled for mM⁻¹ units (k1 = 1.0 mM⁻¹s⁻¹)\n        const k1_scaled = k1 / 1000; // Convert to mM⁻¹s⁻¹ from original units\n        const dES_dt = k1_scaled * E * S - (kMinus1 + k2) * ES;\n        \n        // d[P]/dt = k2[ES] (converting μM·s⁻¹ to mM·s⁻¹)\n        const dP_dt = k2 * ES / 1000;\n        \n        // d[S]/dt = -k1[E][S] + k-1[ES] (converting to mM·s⁻¹)\n        const dS_dt = (-k1_scaled * E * S + kMinus1 * ES / 1000);\n\n        return { dES_dt, dP_dt, dS_dt };\n    }\n\n    /**\n     * Runge-Kutta 4th order integration step\n     * Using capital K to distinguish from kinetic rate constants k1, k-1, k2\n     */\n    rungeKuttaStep() {\n        const h = this.timeStep;\n        const currentState = { ...this.state };\n\n        // Safety check for invalid states\n        if (!isFinite(currentState.substrate) || !isFinite(currentState.enzymeSubstrateComplex) || \n            !isFinite(currentState.freeEnzyme) || currentState.substrate < 0) {\n            console.warn('Invalid simulation state detected, resetting...');\n            this.reset();\n            return;\n        }\n\n        // K1 = h × f(t, y)\n        const derivs1 = this.calculateDerivatives(currentState);\n        const K1 = {\n            ES: h * derivs1.dES_dt,\n            P: h * derivs1.dP_dt,\n            S: h * derivs1.dS_dt\n        };\n\n        // Safety check for K1\n        if (!isFinite(K1.ES) || !isFinite(K1.P) || !isFinite(K1.S)) {\n            console.warn('Invalid derivatives detected, skipping step...');\n            return;\n        }\n\n        // K2 = h × f(t + h/2, y + K1/2)\n        const state2 = {\n            ...currentState,\n            enzymeSubstrateComplex: Math.max(0, currentState.enzymeSubstrateComplex + K1.ES / 2),\n            product: Math.max(0, currentState.product + K1.P / 2),\n            substrate: Math.max(0, currentState.substrate + K1.S / 2)\n        };\n        state2.freeEnzyme = Math.max(0, this.state.enzyme - state2.enzymeSubstrateComplex);\n        \n        const derivs2 = this.calculateDerivatives(state2);\n        const K2 = {\n            ES: h * derivs2.dES_dt,\n            P: h * derivs2.dP_dt,\n            S: h * derivs2.dS_dt\n        };\n\n        // K3 = h × f(t + h/2, y + K2/2)\n        const state3 = {\n            ...currentState,\n            enzymeSubstrateComplex: Math.max(0, currentState.enzymeSubstrateComplex + K2.ES / 2),\n            product: Math.max(0, currentState.product + K2.P / 2),\n            substrate: Math.max(0, currentState.substrate + K2.S / 2)\n        };\n        state3.freeEnzyme = Math.max(0, this.state.enzyme - state3.enzymeSubstrateComplex);\n        \n        const derivs3 = this.calculateDerivatives(state3);\n        const K3 = {\n            ES: h * derivs3.dES_dt,\n            P: h * derivs3.dP_dt,\n            S: h * derivs3.dS_dt\n        };\n\n        // K4 = h × f(t + h, y + K3)\n        const state4 = {\n            ...currentState,\n            enzymeSubstrateComplex: Math.max(0, currentState.enzymeSubstrateComplex + K3.ES),\n            product: Math.max(0, currentState.product + K3.P),\n            substrate: Math.max(0, currentState.substrate + K3.S)\n        };\n        state4.freeEnzyme = Math.max(0, this.state.enzyme - state4.enzymeSubstrateComplex);\n        \n        const derivs4 = this.calculateDerivatives(state4);\n        const K4 = {\n            ES: h * derivs4.dES_dt,\n            P: h * derivs4.dP_dt,\n            S: h * derivs4.dS_dt\n        };\n\n        // y_new = y + (K1 + 2K2 + 2K3 + K4) / 6\n        this.state.enzymeSubstrateComplex = Math.max(0, this.state.enzymeSubstrateComplex + (K1.ES + 2*K2.ES + 2*K3.ES + K4.ES) / 6);\n        this.state.product = Math.max(0, this.state.product + (K1.P + 2*K2.P + 2*K3.P + K4.P) / 6);\n        this.state.substrate = Math.max(0, this.state.substrate + (K1.S + 2*K2.S + 2*K3.S + K4.S) / 6);\n\n        // Update free enzyme concentration: [E] = [E]₀ - [ES]\n        this.state.freeEnzyme = Math.max(0, this.state.enzyme - this.state.enzymeSubstrateComplex);\n\n        // Additional safety constraint: ES cannot exceed total enzyme\n        if (this.state.enzymeSubstrateComplex > this.state.enzyme) {\n            this.state.enzymeSubstrateComplex = this.state.enzyme;\n            this.state.freeEnzyme = 0;\n        }\n\n        // Final safety check\n        if (!isFinite(this.state.substrate) || !isFinite(this.state.product) || !isFinite(this.state.enzymeSubstrateComplex)) {\n            console.warn('NaN detected in simulation state, resetting...');\n            this.reset();\n        }\n    }\n\n    /**\n     * Single simulation step\n     */\n    step() {\n        if (!this.isRunning) return;\n\n        this.rungeKuttaStep();\n        this.time += this.timeStep;\n\n        // Log data for plotting\n        this.logCurrentState();\n    }\n\n    /**\n     * Log current state for plotting\n     */\n    logCurrentState() {\n        this.dataLog.time.push(this.time);\n        this.dataLog.substrate.push(this.state.substrate);\n        this.dataLog.product.push(this.state.product);\n        this.dataLog.enzymeSubstrateComplex.push(this.state.enzymeSubstrateComplex);\n        this.dataLog.velocity.push(this.calculateVelocity());\n    }\n\n    /**\n     * Clear data log\n     */\n    clearDataLog() {\n        this.dataLog.time = [];\n        this.dataLog.substrate = [];\n        this.dataLog.product = [];\n        this.dataLog.enzymeSubstrateComplex = [];\n        this.dataLog.velocity = [];\n    }\n\n    /**\n     * Reset simulation to initial conditions\n     */\n    reset() {\n        this.time = 0.0;\n        this.state.product = 0.0;\n        this.state.enzymeSubstrateComplex = 0.0;\n        this.state.freeEnzyme = this.state.enzyme;\n        // Note: substrate concentration preserved for user-set initial value\n        \n        this.clearDataLog();\n        this.logCurrentState();\n    }\n\n    /**\n     * Update simulation parameters\n     */\n    updateSubstrateConcentration(concentration) {\n        this.state.substrate = concentration;\n    }\n\n    updateEnzymeConcentration(concentration) {\n        this.state.enzyme = concentration;\n        this.state.freeEnzyme = concentration - this.state.enzymeSubstrateComplex;\n    }\n\n    updateInhibitorConcentration(concentration) {\n        this.state.inhibitor = concentration;\n    }\n\n    updateInhibitionType(type) {\n        this.inhibitionType = type;\n    }\n\n    /**\n     * Control simulation state\n     */\n    start() {\n        this.isRunning = true;\n    }\n\n    pause() {\n        this.isRunning = false;\n    }\n\n    /**\n     * Export current data log as CSV-compatible format\n     */\n    exportData() {\n        const headers = ['Time (ms)', 'Substrate (mM)', 'Product (mM)', 'ES Complex (μM)', 'Velocity (μM/ms)'];\n        const rows = this.dataLog.time.map((time, i) => [\n            time.toFixed(3),\n            this.dataLog.substrate[i].toFixed(3),\n            this.dataLog.product[i].toFixed(3),\n            this.dataLog.enzymeSubstrateComplex[i].toFixed(3),\n            this.dataLog.velocity[i].toFixed(4)\n        ]);\n\n        return [headers, ...rows];\n    }\n\n\n} ","/**\n * Discrete Particle-Based Enzyme Kinetics Simulator\n * Updated to support pre-calculated CSV-driven animation\n * \n * Simulates individual enzyme, substrate, product, and inhibitor molecules\n * as discrete particles with probabilistic interactions\n */\n\nexport class EnzymeKineticsSimulator {\n    constructor() {\n        // =================================================================\n        // GLOBAL SPEED CONTROL - Change this value to adjust all movement!\n        // =================================================================\n        // 1.0 = Normal speed, 0.1 = 10x slower, 0.05 = 20x slower, etc.\n        // This controls ALL molecular movement speeds throughout the simulation\n        // \n        // MOVEMENT MODEL: Constant speed motion for predictable behavior\n        // - Each molecule type has a specific target speed\n        // - Speed remains exactly constant (no acceleration/deceleration)\n        // - Clean wall bouncing preserves speed and direction\n        // - No damping or artificial speed changes\n        this.BASE_SPEED_MULTIPLIER = 0.75; // Base animation speed for desktop\n        \n        // Default parameters based on back logic\n        this.parameters = {\n            S_concentration: 20.0, // mM (0-50 range)\n            E_concentration: 1.0,  // μM (0.01-1 range)\n            I_concentration: 0,  // mM (0-40 range)\n            inhibitor_type: 'None', // None, Competitive, Un-competitive, Non-competitive\n            \n            // Kinetic constants (assigned reasonable ranges)\n            k_on_ES: 0.5,    // probability for ES formation (0-1)\n            k_on_EI: 0.08,   // probability for EI formation (0-1)\n            k_off_ES: 0.01,  // probability for ES dissociation (0-1)\n            k_off_EI: 0.03,  // probability for EI dissociation (0-1)\n            k_cat: 0.035,      // probability for product formation (0-1)\n            \n            // Simulation parameters\n            timeframe: 500,    // seconds\n            time_step: 0.01,  // seconds (matches mathematical simulation)\n            canvas_width: 800,\n            canvas_height: 400\n        };\n        \n        this.objects = [];\n        this.results = [];\n        this.time = 0;\n        this.lastRecordTime = 0;\n        this.isRunning = false;\n        \n        // Pre-calculated simulation data\n        this.preCalculatedData = {\n            timePoints: [],\n            particleData: [],    // [time, particles_array]\n            summaryData: [],     // [time, summary_object]\n            isGenerated: false,\n            totalDuration: 0\n        };\n        \n        // Playback state\n        this.playbackState = {\n            isPlaying: false,\n            currentTime: 0,\n            playbackSpeed: 1.0,\n            mode: 'live' // 'live' or 'playback'\n        };\n        \n        // Data logging for export\n        this.dataLog = {\n            time: [],\n            molecularData: [],\n            summary: []\n        };\n        \n        // Pre-calculation control\n        this.isPreCalculating = false;\n    }\n\n    /**\n     * Calculate responsive speed multiplier based on canvas width\n     * Desktop (≥800px) gets full speed, mobile gets heavily reduced speed (0.2x)\n     */\n    getResponsiveSpeedMultiplier() {\n        const canvasWidth = this.parameters.canvas_width || 800;\n        const referenceWidth = 800; // Desktop reference width\n        \n        // More aggressive scaling for mobile devices\n        let scaleFactor;\n        if (canvasWidth >= 800) {\n            scaleFactor = 1.0; // Desktop - full speed\n        } else if (canvasWidth >= 600) {\n            scaleFactor = 0.6; // Tablet - moderately reduced\n        } else {\n            scaleFactor = 0.3; // Mobile - reduced (30% speed)\n        }\n        \n        return this.BASE_SPEED_MULTIPLIER * scaleFactor;\n    }\n\n    /**\n     * Calculate responsive binding threshold based on canvas width\n     * Uses the same scaling factors as object sizes and speeds\n     */\n    getResponsiveBindingThreshold(baseThreshold = 25) {\n        const canvasWidth = this.parameters.canvas_width || 800;\n        \n        // Use same scaling logic as speeds and sizes\n        let scaleFactor;\n        if (canvasWidth >= 800) {\n            scaleFactor = 1.0; // Desktop - full threshold\n        } else if (canvasWidth >= 600) {\n            scaleFactor = 0.6; // Tablet - moderately reduced\n        } else {\n            scaleFactor = 0.3; // Mobile - reduced (30% threshold)\n        }\n        \n        return Math.max(5, baseThreshold * scaleFactor); // Minimum threshold of 5px\n    }\n    \n    // Set simulation parameters\n    setParameters(params) {\n        // Check if parameters that affect simulation data have actually changed\n        const significantParams = ['S_concentration', 'E_concentration', 'I_concentration', 'inhibitor_type'];\n        const hasSignificantChange = significantParams.some(param => \n            params.hasOwnProperty(param) && params[param] !== this.parameters[param]\n        );\n        \n        this.parameters = { ...this.parameters, ...params };\n        \n        // Only invalidate data if significant parameters changed, not just canvas dimensions\n        if (hasSignificantChange) {\n            console.log('EnzymeKineticsSimulator: Significant parameter change detected, invalidating simulation data');\n            // If parameters change, cancel any ongoing pre-calculation and invalidate data\n            this.isPreCalculating = false;\n            this.preCalculatedData.isGenerated = false;\n            \n            // Always initialize objects when parameters change so user can see initial state\n            this.initializeObjects();\n        } else {\n            // Just update canvas dimensions without invalidating simulation data\n            if (params.canvas_width || params.canvas_height) {\n                console.log('EnzymeKineticsSimulator: Canvas dimensions updated, preserving simulation data');\n                // Re-initialize objects with new canvas bounds but keep simulation data\n                this.initializeObjects();\n            }\n        }\n    }\n    \n    // Pre-calculate complete simulation with multi-run averaging\n    async preCalculateSimulation(progressCallback = null) {\n        // Prevent multiple simultaneous pre-calculations\n        if (this.isPreCalculating) {\n            console.warn('Pre-calculation already in progress, forcing reset and starting fresh...');\n            this.isPreCalculating = false;\n            this.preCalculatedData.isGenerated = false;\n        }\n        \n        // Reset state to ensure clean start\n        this.isPreCalculating = true;\n        this.preCalculatedData.isGenerated = false;\n        console.log('Pre-calculating simulation with 2 runs for averaging...');\n        \n        try {\n            const startTime = performance.now();\n            const numRuns = 2;\n            const allRuns = [];\n            \n            // Run simulation 2 times to collect data for averaging\n            for (let run = 0; run < numRuns; run++) {\n                if (!this.isPreCalculating) {\n                    console.log('Pre-calculation cancelled during run', run + 1);\n                    break;\n                }\n                \n                console.log(`Starting simulation run ${run + 1}/${numRuns}`);\n                const runData = await this.runSingleSimulation(progressCallback, run, numRuns);\n                \n                if (runData) {\n                    allRuns.push(runData);\n                } else {\n                    console.warn(`Run ${run + 1} failed to generate data`);\n                }\n            }\n            \n            if (!this.isPreCalculating || allRuns.length === 0) {\n                console.log('Pre-calculation was cancelled or failed - no valid runs collected');\n                this.isPreCalculating = false;\n                this.preCalculatedData.isGenerated = false;\n                return null;\n            }\n            \n            // Calculate averaged data and prepare final dataset\n            this.calculateAveragedData(allRuns);\n            \n            const endTime = performance.now();\n            const duration = endTime - startTime;\n            \n            this.preCalculatedData.isGenerated = true;\n            this.isPreCalculating = false;\n            \n            console.log(`Pre-calculation complete: 2 runs averaged, ${this.preCalculatedData.timePoints.length} frames in ${duration.toFixed(2)}ms`);\n            console.log('Memory: Only essential simulation data retained (no redundant individualRuns stored)');\n            \n            return this.preCalculatedData;\n            \n        } catch (error) {\n            console.error('Pre-calculation failed with error:', error);\n            this.isPreCalculating = false;\n            this.preCalculatedData.isGenerated = false;\n            throw error;\n        }\n    }\n\n    // Run a single simulation and return the data\n    async runSingleSimulation(progressCallback = null, runIndex = 0, totalRuns = 1) {\n        // Reset state for this run\n        this.time = 0;\n        this.lastRecordTime = 0;\n        this.initializeObjects(); // This creates random initial positions/velocities\n        \n        const runData = {\n            timePoints: [],\n            particleData: [],\n            summaryData: []\n        };\n        \n        let stepCount = 0;\n        const totalSteps = Math.ceil(this.parameters.timeframe / this.parameters.time_step);\n        \n        // Run complete simulation\n        while (this.time < this.parameters.timeframe && this.isPreCalculating) {\n            this.simulateStepForPreCalculation(this.parameters.time_step);\n            \n            // Record data every ~33ms for smooth 30 FPS playback\n            if (this.time - this.lastRecordTime >= 0.033) {\n                this.recordStateForRun(runData);\n                this.lastRecordTime = this.time;\n            }\n            \n            stepCount++;\n            \n            // Report progress periodically\n            if (progressCallback && stepCount % 1000 === 0) {\n                const overallProgress = ((runIndex + (stepCount / totalSteps)) / totalRuns) * 100;\n                progressCallback(overallProgress);\n                \n                // Allow UI to update\n                await new Promise(resolve => setTimeout(resolve, 0));\n            }\n            \n            this.time += this.parameters.time_step;\n        }\n        \n        // Final record for this run\n        if (this.isPreCalculating) {\n            this.recordStateForRun(runData);\n        }\n        \n        console.log(`Run ${runIndex + 1} complete: ${runData.timePoints.length} frames`);\n        return runData;\n    }\n\n    // Record state for a specific run (similar to recordStateForPlayback but for individual runs)\n    recordStateForRun(runData) {\n        const currentTime = this.time;\n        \n        // Deep copy particles for this time point\n        const particlesCopy = this.objects.map(obj => ({\n            id: obj.id,\n            type: obj.type,\n            unique_name: obj.unique_name,\n            x: obj.x,\n            y: obj.y,\n            vx: obj.vx,\n            vy: obj.vy,\n            bound: obj.bound\n        }));\n        \n        const summary = this.getSummary();\n        \n        runData.timePoints.push(currentTime);\n        runData.particleData.push([currentTime, particlesCopy]);\n        runData.summaryData.push([currentTime, summary]);\n    }\n\n    // Calculate averaged data from multiple runs\n    calculateAveragedData(allRuns) {\n        console.log('Calculating averaged data from', allRuns.length, 'runs');\n        \n        // Use the first run for particle data (molecular view)\n        const representativeRun = allRuns[0];\n        \n        // TARGETED MEMORY LEAK FIX: Only clear old data and avoid storing redundant individualRuns\n        // Keep all essential data needed for both molecular and plot views\n        this.preCalculatedData = {\n            timePoints: [...representativeRun.timePoints], // Copy for safety - needed for both views\n            particleData: [...representativeRun.particleData], // Copy for safety - essential for molecular view\n            summaryData: [], // Will be filled with averaged data - essential for plot view\n            averagedData: [], // Store pure averaged summary data for CSV/plots\n            // MEMORY LEAK FIX: Don't store individualRuns - this was accumulating indefinitely\n            isGenerated: false,\n            totalDuration: this.parameters.timeframe\n        };\n        \n        // Create averaged summary data\n        const timePoints = representativeRun.timePoints;\n        \n        for (let i = 0; i < timePoints.length; i++) {\n            const time = timePoints[i];\n            const averagedSummary = {};\n            \n            // Average each molecule type across all runs\n            ['E', 'S', 'I', 'P', 'ES', 'EI', 'ESI'].forEach(type => {\n                let sum = 0;\n                let validRuns = 0;\n                \n                allRuns.forEach(run => {\n                    if (i < run.summaryData.length) {\n                        const runSummary = run.summaryData[i][1];\n                        sum += runSummary[type] || 0;\n                        validRuns++;\n                    }\n                });\n                \n                averagedSummary[type] = validRuns > 0 ? sum / validRuns : 0;\n            });\n            \n            this.preCalculatedData.summaryData.push([time, averagedSummary]);\n            this.preCalculatedData.averagedData.push([time, averagedSummary]);\n        }\n        \n        console.log('Averaged data calculated:', this.preCalculatedData.summaryData.length, 'time points');\n        console.log('Essential data preserved: timePoints, particleData, summaryData, averagedData');\n    }\n    \n    // Record state for playback\n    recordStateForPlayback() {\n        const currentTime = this.time;\n        \n        // Deep copy particles for this time point\n        const particlesCopy = this.objects.map(obj => ({\n            id: obj.id,\n            type: obj.type,\n            unique_name: obj.unique_name,\n            x: obj.x,\n            y: obj.y,\n            vx: obj.vx,\n            vy: obj.vy,\n            bound: obj.bound\n        }));\n        \n        const summary = this.getSummary();\n        \n        this.preCalculatedData.timePoints.push(currentTime);\n        this.preCalculatedData.particleData.push([currentTime, particlesCopy]);\n        this.preCalculatedData.summaryData.push([currentTime, summary]);\n    }\n    \n    // Get particles at specific time (for playback) - optimized with binary search\n    getParticlesAtTime(targetTime) {\n        if (!this.preCalculatedData.isGenerated) {\n            return this.objects; // Fall back to current objects\n        }\n        \n        const timePoints = this.preCalculatedData.timePoints;\n        if (timePoints.length === 0) return [];\n        \n        // Binary search for closest time point (much faster than linear search)\n        let left = 0;\n        let right = timePoints.length - 1;\n        let closestIndex = 0;\n        \n        while (left <= right) {\n            const mid = Math.floor((left + right) / 2);\n            const midTime = timePoints[mid];\n            \n            if (midTime === targetTime) {\n                closestIndex = mid;\n                break;\n            } else if (midTime < targetTime) {\n                left = mid + 1;\n                closestIndex = mid; // Closest so far\n            } else {\n                right = mid - 1;\n            }\n        }\n        \n        // Check if the next index is closer\n        if (closestIndex + 1 < timePoints.length) {\n            const currentDiff = Math.abs(timePoints[closestIndex] - targetTime);\n            const nextDiff = Math.abs(timePoints[closestIndex + 1] - targetTime);\n            if (nextDiff < currentDiff) {\n                closestIndex = closestIndex + 1;\n            }\n        }\n        \n        return this.preCalculatedData.particleData[closestIndex]?.[1] || [];\n    }\n    \n    // Get summary at specific time (for playback) - optimized with binary search\n    getSummaryAtTime(targetTime) {\n        if (!this.preCalculatedData.isGenerated) {\n            return this.getSummary(); // Fall back to current summary\n        }\n        \n        const timePoints = this.preCalculatedData.timePoints;\n        if (timePoints.length === 0) return {};\n        \n        // Binary search for closest time point (reusing same logic as getParticlesAtTime)\n        let left = 0;\n        let right = timePoints.length - 1;\n        let closestIndex = 0;\n        \n        while (left <= right) {\n            const mid = Math.floor((left + right) / 2);\n            const midTime = timePoints[mid];\n            \n            if (midTime === targetTime) {\n                closestIndex = mid;\n                break;\n            } else if (midTime < targetTime) {\n                left = mid + 1;\n                closestIndex = mid;\n            } else {\n                right = mid - 1;\n            }\n        }\n        \n        // Check if the next index is closer\n        if (closestIndex + 1 < timePoints.length) {\n            const currentDiff = Math.abs(timePoints[closestIndex] - targetTime);\n            const nextDiff = Math.abs(timePoints[closestIndex + 1] - targetTime);\n            if (nextDiff < currentDiff) {\n                closestIndex = closestIndex + 1;\n            }\n        }\n        \n        return this.preCalculatedData.summaryData[closestIndex]?.[1] || {};\n    }\n    \n    // Switch to playback mode\n    switchToPlaybackMode() {\n        this.playbackState.mode = 'playback';\n        this.playbackState.currentTime = 0;\n        this.playbackState.isPlaying = false;\n    }\n    \n    // Switch to live mode\n    switchToLiveMode() {\n        this.playbackState.mode = 'live';\n        this.initializeObjects();\n    }\n    \n    // Playback controls\n    playPlayback() {\n        if (this.playbackState.mode === 'playback') {\n            this.playbackState.isPlaying = true;\n        }\n    }\n    \n    pausePlayback() {\n        this.playbackState.isPlaying = false;\n    }\n    \n    setPlaybackTime(time) {\n        if (this.playbackState.mode === 'playback') {\n            this.playbackState.currentTime = Math.max(0, Math.min(time, this.preCalculatedData.totalDuration));\n        }\n    }\n    \n    // Playback speed is fixed at 1.0x for simplicity\n    setPlaybackSpeed(speed) {\n        // Speed is always 1.0x - this method kept for compatibility but does nothing\n        this.playbackState.playbackSpeed = 1.0;\n    }\n    \n    // Update playback time\n    updatePlayback(deltaTime) {\n        if (this.playbackState.mode === 'playback' && this.playbackState.isPlaying) {\n            this.playbackState.currentTime += deltaTime * this.playbackState.playbackSpeed;\n            \n            // Loop back to start if we reach the end\n            if (this.playbackState.currentTime >= this.preCalculatedData.totalDuration) {\n                this.playbackState.currentTime = 0;\n            }\n        }\n    }\n\n    // Initialize objects based on concentrations\n    initializeObjects() {\n        this.objects = [];\n        \n        // Initialize counters for unique naming\n        this.object_counters = {\n            S: 1,\n            E: 1,\n            I: 1,\n            P: 1,\n            ES: 1,\n            EI: 1,\n            ESI: 1\n        };\n        \n        // Calculate number of objects based on concentrations\n        // Using a scaling factor to keep numbers manageable for performance\n        const scale_factor = 10; // 10 particles per mM concentration\n        \n        const num_S = Math.round(this.parameters.S_concentration * scale_factor);\n        const num_E = Math.round(this.parameters.E_concentration * scale_factor); // Now in mM, same scaling as substrate\n        const num_I = this.parameters.inhibitor_type === 'None' ? 0 : \n                     Math.round(this.parameters.I_concentration * scale_factor);\n        \n        // Create substrate molecules\n        for (let i = 0; i < num_S; i++) {\n            const angle = Math.random() * 2 * Math.PI;\n            const speed = 50 * this.getResponsiveSpeedMultiplier(); // Base speed for substrates\n            this.objects.push({\n                id: `S_${i}`,\n                type: 'S',\n                unique_name: `S${this.object_counters.S++}`,\n                x: Math.random() * this.parameters.canvas_width,\n                y: Math.random() * this.parameters.canvas_height,\n                vx: Math.cos(angle) * speed,\n                vy: Math.sin(angle) * speed,\n                targetSpeed: speed,\n                bound: false\n            });\n        }\n        \n        // Create enzyme molecules\n        for (let i = 0; i < num_E; i++) {\n            const angle = Math.random() * 2 * Math.PI;\n            const speed = 40 * this.getResponsiveSpeedMultiplier(); // Slower speed for enzymes\n            this.objects.push({\n                id: `E_${i}`,\n                type: 'E',\n                unique_name: `E${this.object_counters.E++}`,\n                x: Math.random() * this.parameters.canvas_width,\n                y: Math.random() * this.parameters.canvas_height,\n                vx: Math.cos(angle) * speed,\n                vy: Math.sin(angle) * speed,\n                targetSpeed: speed,\n                bound: false,\n                substrate_bound: false,\n                inhibitor_bound: false\n            });\n        }\n        \n        // Create inhibitor molecules\n        for (let i = 0; i < num_I; i++) {\n            const angle = Math.random() * 2 * Math.PI;\n            const speed = 60 * this.getResponsiveSpeedMultiplier(); // Faster speed for inhibitors\n            this.objects.push({\n                id: `I_${i}`,\n                type: 'I',\n                unique_name: `I${this.object_counters.I++}`,\n                x: Math.random() * this.parameters.canvas_width,\n                y: Math.random() * this.parameters.canvas_height,\n                vx: Math.cos(angle) * speed,\n                vy: Math.sin(angle) * speed,\n                targetSpeed: speed,\n                bound: false\n            });\n        }\n        \n        this.clearDataLog();\n        \n        // Notify that objects are ready for initial rendering\n        if (this.onObjectsInitialized) {\n            this.onObjectsInitialized();\n        }\n    }\n    \n    // Method to easily adjust global speed during runtime\n    setGlobalSpeedMultiplier(multiplier) {\n        this.BASE_SPEED_MULTIPLIER = Math.max(0.01, Math.min(multiplier, 2.0)); // Clamp between 0.01 and 2.0\n        console.log(`Base speed multiplier set to: ${this.BASE_SPEED_MULTIPLIER} (responsive: ${this.getResponsiveSpeedMultiplier()})`);\n    }\n    \n    // Check if two objects are close enough to interact\n    isNearby(obj1, obj2, threshold = null) {\n        // Use responsive threshold if none provided\n        const bindingThreshold = threshold || this.getResponsiveBindingThreshold(25);\n        \n        const dx = obj1.x - obj2.x;\n        const dy = obj1.y - obj2.y;\n        return Math.sqrt(dx * dx + dy * dy) < bindingThreshold;\n    }\n    \n    // Simulate one time step with delta time (for live mode)\n    simulateStep(deltaTime = null) {\n        if (!this.isRunning || this.playbackState.mode !== 'live') return;\n        \n        // Use provided deltaTime or default time step\n        const dt = deltaTime || this.parameters.time_step;\n        \n        this.simulateStepForPreCalculation(dt);\n        \n        // Record current state at reasonable intervals for CSV export (can be less frequent)\n        if (this.time - this.lastRecordTime >= 0.05) { // Record every 50ms for CSV export\n            this.recordState();\n            this.lastRecordTime = this.time;\n        }\n        \n        // Advance time\n        this.time += dt;\n    }\n    \n    // Simulate one step (used for both live and pre-calculation)\n    simulateStepForPreCalculation(deltaTime) {\n        const enzymes = this.objects.filter(obj => obj.type === 'E');\n        const substrates = this.objects.filter(obj => obj.type === 'S' && !obj.bound);\n        const inhibitors = this.objects.filter(obj => obj.type === 'I' && !obj.bound);\n        const complexes = this.objects.filter(obj => ['ES', 'EI', 'ESI'].includes(obj.type));\n        \n        // Handle complex reactions first (scale probabilities by dt)\n        this.handleComplexReactions(complexes, deltaTime);\n        \n        // Handle enzyme-substrate interactions (scale probabilities by dt)\n        this.handleEnzymeSubstrateInteractions(enzymes, substrates, deltaTime);\n        \n        // Handle enzyme-inhibitor interactions based on inhibitor type\n        if (this.parameters.inhibitor_type !== 'None') {\n            this.handleEnzymeInhibitorInteractions(enzymes, inhibitors, deltaTime);\n        }\n        \n        // Move objects randomly (scale movement by dt)\n        this.moveObjects(deltaTime);\n    }\n\n    // Handle reactions of existing complexes\n    handleComplexReactions(complexes, deltaTime) {\n        complexes.forEach(complex => {\n            if (complex.type === 'ES') {\n                // ES can dissociate or form product (scaled for actual time step)\n                if (Math.random() < this.parameters.k_off_ES * deltaTime) {\n                    this.dissociateComplex(complex, 'E', 'S');\n                } else if (Math.random() < this.parameters.k_cat * deltaTime) {\n                    this.formProduct(complex);\n                }\n            } else if (complex.type === 'EI') {\n                // EI can dissociate (scaled for actual time step)\n                if (Math.random() < this.parameters.k_off_EI * deltaTime) {\n                    this.dissociateComplex(complex, 'E', 'I');\n                }\n            } else if (complex.type === 'ESI') {\n                // ESI can dissociate in different ways or form product (scaled for actual time step)\n                if (Math.random() < this.parameters.k_off_ES * 0.5 * deltaTime) {\n                    this.dissociateESItoEI(complex);\n                } else if (Math.random() < this.parameters.k_off_EI * 0.5 * deltaTime) {\n                    this.dissociateESItoES(complex);\n                } else if (Math.random() < this.parameters.k_cat * 0.1 * deltaTime) {\n                    // ESI has reduced catalytic activity\n                    this.formProductFromESI(complex);\n                }\n            }\n        });\n    }\n    \n    // Handle enzyme-substrate binding\n    handleEnzymeSubstrateInteractions(enzymes, substrates, deltaTime) {\n        enzymes.forEach(enzyme => {\n            if (enzyme.bound) return;\n            \n            substrates.forEach(substrate => {\n                if (substrate.bound) return;\n                \n                if (this.isNearby(enzyme, substrate) && Math.random() < this.parameters.k_on_ES * deltaTime) {\n                    this.formComplex(enzyme, substrate, 'ES');\n                }\n            });\n        });\n    }\n    \n    // Handle enzyme-inhibitor binding based on inhibitor type\n    handleEnzymeInhibitorInteractions(enzymes, inhibitors, deltaTime) {\n        const complexes = this.objects.filter(obj => obj.type === 'ES');\n        \n        inhibitors.forEach(inhibitor => {\n            if (inhibitor.bound) return;\n            \n            if (this.parameters.inhibitor_type === 'Competitive') {\n                // Can only bind to free enzyme\n                enzymes.forEach(enzyme => {\n                    if (!enzyme.bound && this.isNearby(enzyme, inhibitor) && \n                        Math.random() < this.parameters.k_on_EI * deltaTime) {\n                        this.formComplex(enzyme, inhibitor, 'EI');\n                    }\n                });\n            } else if (this.parameters.inhibitor_type === 'Un-competitive') {\n                // Can only bind to ES complex\n                complexes.forEach(complex => {\n                    if (this.isNearby(complex, inhibitor) && \n                        Math.random() < this.parameters.k_on_EI * deltaTime) {\n                        this.formESIComplex(complex, inhibitor);\n                    }\n                });\n            } else if (this.parameters.inhibitor_type === 'Non-competitive') {\n                // Can bind to both free enzyme and ES complex\n                enzymes.forEach(enzyme => {\n                    if (!enzyme.bound && this.isNearby(enzyme, inhibitor) && \n                        Math.random() < this.parameters.k_on_EI * deltaTime) {\n                        this.formComplex(enzyme, inhibitor, 'EI');\n                    }\n                });\n                \n                complexes.forEach(complex => {\n                    if (this.isNearby(complex, inhibitor) && \n                        Math.random() < this.parameters.k_on_EI * deltaTime) {\n                        this.formESIComplex(complex, inhibitor);\n                    }\n                });\n            }\n        });\n    }\n    \n    // Form a binary complex (ES or EI)\n    formComplex(obj1, obj2, complexType) {\n        // Remove original objects\n        this.objects = this.objects.filter(obj => obj.id !== obj1.id && obj.id !== obj2.id);\n        \n        // Create complex with constant speed\n        const complexAngle = Math.random() * 2 * Math.PI;\n        const baseSpeed = 50 * this.getResponsiveSpeedMultiplier();\n        const complexSpeedMap = { 'ES': 0.4, 'EI': 0.4, 'ESI': 0.3 };\n        const complexSpeed = baseSpeed * (complexSpeedMap[complexType] || 0.4);\n        \n        this.objects.push({\n            id: `${complexType}_${obj1.id}_${obj2.id}`,\n            type: complexType,\n            unique_name: `${complexType}${this.object_counters[complexType]++}`,\n            x: (obj1.x + obj2.x) / 2,\n            y: (obj1.y + obj2.y) / 2,\n            vx: Math.cos(complexAngle) * complexSpeed,\n            vy: Math.sin(complexAngle) * complexSpeed,\n            targetSpeed: complexSpeed,\n            bound: true,\n            components: [obj1.id, obj2.id],\n            component_names: [obj1.unique_name, obj2.unique_name]\n        });\n    }\n    \n    // Form ESI complex from ES and I\n    formESIComplex(esComplex, inhibitor) {\n        this.objects = this.objects.filter(obj => obj.id !== esComplex.id && obj.id !== inhibitor.id);\n        \n        // Ensure components array exists, if not create from complex ID\n        const esComponents = esComplex.components || [esComplex.id.split('_')[1], esComplex.id.split('_')[2]];\n        const esComponentNames = esComplex.component_names || [esComplex.unique_name];\n        \n        this.objects.push({\n            id: `ESI_${esComplex.id}_${inhibitor.id}`,\n            type: 'ESI',\n            unique_name: `ESI${this.object_counters.ESI++}`,\n            x: (esComplex.x + inhibitor.x) / 2,\n            y: (esComplex.y + inhibitor.y) / 2,\n            vx: ((esComplex.vx || 0) + (inhibitor.vx || 0)) / 4, // Even slower for triple complex, already controlled by global multiplier\n            vy: ((esComplex.vy || 0) + (inhibitor.vy || 0)) / 4,\n            bound: true,\n            components: [...esComponents, inhibitor.id],\n            component_names: [...esComponentNames, inhibitor.unique_name]\n        });\n    }\n    \n    // Dissociate a complex\n    dissociateComplex(complex, type1, type2) {\n        this.objects = this.objects.filter(obj => obj.id !== complex.id);\n        \n        // Create dissociated objects with constant speeds\n        const angle1 = Math.random() * 2 * Math.PI;\n        const angle2 = Math.random() * 2 * Math.PI;\n        const baseSpeed = 50 * this.getResponsiveSpeedMultiplier();\n        const speedMap = { 'E': 0.8, 'S': 1.0, 'I': 1.2, 'P': 0.6 };\n        \n        const speed1 = baseSpeed * (speedMap[type1] || 1.0);\n        const speed2 = baseSpeed * (speedMap[type2] || 1.0);\n        \n        this.objects.push({\n            id: `${type1}_${Date.now()}_${Math.random()}`,\n            type: type1,\n            unique_name: `${type1}${this.object_counters[type1]++}`,\n            x: complex.x + (Math.random() - 0.5) * 10,\n            y: complex.y + (Math.random() - 0.5) * 10,\n            vx: Math.cos(angle1) * speed1,\n            vy: Math.sin(angle1) * speed1,\n            targetSpeed: speed1,\n            bound: false\n        });\n        \n        this.objects.push({\n            id: `${type2}_${Date.now()}_${Math.random()}`,\n            type: type2,\n            unique_name: `${type2}${this.object_counters[type2]++}`,\n            x: complex.x + (Math.random() - 0.5) * 10,\n            y: complex.y + (Math.random() - 0.5) * 10,\n            vx: Math.cos(angle2) * speed2,\n            vy: Math.sin(angle2) * speed2,\n            targetSpeed: speed2,\n            bound: false\n        });\n    }\n    \n    // Dissociate ESI to EI + S\n    dissociateESItoEI(esiComplex) {\n        this.objects = this.objects.filter(obj => obj.id !== esiComplex.id);\n        \n        // Create EI complex (E+I from the original ESI)\n        this.objects.push({\n            id: `EI_${Date.now()}_${Math.random()}`,\n            type: 'EI',\n            unique_name: `EI${this.object_counters.EI++}`,\n            x: esiComplex.x + (Math.random() - 0.5) * 5,\n            y: esiComplex.y + (Math.random() - 0.5) * 5,\n            vx: (Math.random() - 0.5) * 40 * this.getResponsiveSpeedMultiplier(), // Controlled complex speed\n            vy: (Math.random() - 0.5) * 40 * this.getResponsiveSpeedMultiplier(),\n            bound: true,\n            components: ['E', 'I'],\n            component_names: ['E', 'I']\n        });\n        \n        // Create free substrate\n        this.objects.push({\n            id: `S_${Date.now()}_${Math.random()}`,\n            type: 'S',\n            unique_name: `S${this.object_counters.S++}`,\n            x: esiComplex.x + (Math.random() - 0.5) * 10,\n            y: esiComplex.y + (Math.random() - 0.5) * 10,\n            vx: (Math.random() - 0.5) * 100 * this.getResponsiveSpeedMultiplier(),\n            vy: (Math.random() - 0.5) * 100 * this.getResponsiveSpeedMultiplier(),\n            bound: false\n        });\n    }\n    \n    // Dissociate ESI to ES + I\n    dissociateESItoES(esiComplex) {\n        this.objects = this.objects.filter(obj => obj.id !== esiComplex.id);\n        \n        // Create ES complex (E+S from the original ESI)\n        this.objects.push({\n            id: `ES_${Date.now()}_${Math.random()}`,\n            type: 'ES',\n            unique_name: `ES${this.object_counters.ES++}`,\n            x: esiComplex.x + (Math.random() - 0.5) * 5,\n            y: esiComplex.y + (Math.random() - 0.5) * 5,\n            vx: (Math.random() - 0.5) * 40 * this.getResponsiveSpeedMultiplier(), // Controlled complex speed\n            vy: (Math.random() - 0.5) * 40 * this.getResponsiveSpeedMultiplier(),\n            bound: true,\n            components: ['E', 'S'],\n            component_names: ['E', 'S']\n        });\n        \n        // Create free inhibitor\n        this.objects.push({\n            id: `I_${Date.now()}_${Math.random()}`,\n            type: 'I',\n            unique_name: `I${this.object_counters.I++}`,\n            x: esiComplex.x + (Math.random() - 0.5) * 10,\n            y: esiComplex.y + (Math.random() - 0.5) * 10,\n            vx: (Math.random() - 0.5) * 120 * this.getResponsiveSpeedMultiplier(),\n            vy: (Math.random() - 0.5) * 120 * this.getResponsiveSpeedMultiplier(),\n            bound: false\n        });\n    }\n    \n    // Form product from ES complex\n    formProduct(esComplex) {\n        this.objects = this.objects.filter(obj => obj.id !== esComplex.id);\n        \n        // Create free enzyme with constant speed\n        const enzymeAngle = Math.random() * 2 * Math.PI;\n        const enzymeSpeed = 40 * this.getResponsiveSpeedMultiplier();\n        this.objects.push({\n            id: `E_${Date.now()}_${Math.random()}`,\n            type: 'E',\n            unique_name: `E${this.object_counters.E++}`,\n            x: esComplex.x,\n            y: esComplex.y,\n            vx: Math.cos(enzymeAngle) * enzymeSpeed,\n            vy: Math.sin(enzymeAngle) * enzymeSpeed,\n            targetSpeed: enzymeSpeed,\n            bound: false\n        });\n        \n        // Create product with constant speed\n        const productAngle = Math.random() * 2 * Math.PI;\n        const productSpeed = 30 * this.getResponsiveSpeedMultiplier();\n        this.objects.push({\n            id: `P_${Date.now()}_${Math.random()}`,\n            type: 'P',\n            unique_name: `P${this.object_counters.P++}`,\n            x: esComplex.x + (Math.random() - 0.5) * 10,\n            y: esComplex.y + (Math.random() - 0.5) * 10,\n            vx: Math.cos(productAngle) * productSpeed,\n            vy: Math.sin(productAngle) * productSpeed,\n            targetSpeed: productSpeed,\n            bound: false\n        });\n    }\n    \n    // Form product from ESI complex (reduced efficiency)\n    formProductFromESI(esiComplex) {\n        this.objects = this.objects.filter(obj => obj.id !== esiComplex.id);\n        \n        // Create EI complex\n        this.objects.push({\n            id: `EI_${Date.now()}_${Math.random()}`,\n            type: 'EI',\n            unique_name: `EI${this.object_counters.EI++}`,\n            x: esiComplex.x,\n            y: esiComplex.y,\n            vx: (Math.random() - 0.5) * 40 * this.getResponsiveSpeedMultiplier(), // Controlled complex speed\n            vy: (Math.random() - 0.5) * 40 * this.getResponsiveSpeedMultiplier(),\n            bound: true,\n            components: ['E', 'I'],\n            component_names: ['E', 'I']\n        });\n        \n        // Create product\n        this.objects.push({\n            id: `P_${Date.now()}_${Math.random()}`,\n            type: 'P',\n            unique_name: `P${this.object_counters.P++}`,\n            x: esiComplex.x + (Math.random() - 0.5) * 10,\n            y: esiComplex.y + (Math.random() - 0.5) * 10,\n            vx: (Math.random() - 0.5) * 60 * this.getResponsiveSpeedMultiplier(),\n            vy: (Math.random() - 0.5) * 60 * this.getResponsiveSpeedMultiplier(),\n            bound: false\n        });\n    }\n    \n    // Move objects with constant speed movement\n    moveObjects(deltaTime) {\n        this.objects.forEach(obj => {\n            if (!obj.bound || ['ES', 'EI', 'ESI'].includes(obj.type)) {\n                // Initialize velocity and target speed if not exists\n                if (!obj.vx || !obj.vy || !obj.targetSpeed) {\n                    // Set random direction\n                    const angle = Math.random() * 2 * Math.PI;\n                    \n                                    // Set target speed based on molecule type\n                const baseSpeed = 50 * this.getResponsiveSpeedMultiplier();\n                    const speedVariation = {\n                        'S': 1.0,    // Substrate - normal speed\n                        'E': 0.8,    // Enzyme - slightly slower \n                        'I': 1.2,    // Inhibitor - slightly faster\n                        'P': 0.6,    // Product - slower\n                        'ES': 0.4,   // ES complex - much slower\n                        'EI': 0.4,   // EI complex - much slower\n                        'ESI': 0.3   // ESI complex - slowest\n                    };\n                    \n                    obj.targetSpeed = baseSpeed * (speedVariation[obj.type] || 1.0);\n                    obj.vx = Math.cos(angle) * obj.targetSpeed;\n                    obj.vy = Math.sin(angle) * obj.targetSpeed;\n                }\n                \n                // CONSTANT SPEED: Maintain exact target speed always\n                const currentSpeed = Math.sqrt(obj.vx * obj.vx + obj.vy * obj.vy);\n                if (currentSpeed > 0) {\n                    // Normalize to maintain constant speed\n                    obj.vx = (obj.vx / currentSpeed) * obj.targetSpeed;\n                    obj.vy = (obj.vy / currentSpeed) * obj.targetSpeed;\n                }\n                \n                // Update position\n                obj.x += obj.vx * deltaTime;\n                obj.y += obj.vy * deltaTime;\n                \n                // Clean wall bouncing - maintain speed, just reverse direction\n                // Use responsive boundary matching MolecularRenderer constraint logic\n                const canvasWidth = this.parameters.canvas_width;\n                const canvasHeight = this.parameters.canvas_height;\n                \n                // Calculate responsive boundary based on canvas width (same logic as MolecularRenderer)\n                let scaleFactor;\n                if (canvasWidth >= 800) {\n                    scaleFactor = 1.0; // Desktop - full boundary\n                } else if (canvasWidth >= 600) {\n                    scaleFactor = 0.6; // Tablet - moderately reduced\n                } else {\n                    scaleFactor = 0.3; // Mobile - reduced (30% boundary)\n                }\n                \n                const largestMoleculeRadius = 20; // ESI complex base size\n                const boundary = Math.max(5, largestMoleculeRadius * scaleFactor);\n                \n                if (obj.x <= boundary || obj.x >= canvasWidth - boundary) {\n                    obj.vx = -obj.vx;  // Perfect reflection maintains speed\n                    obj.x = Math.max(boundary, Math.min(canvasWidth - boundary, obj.x));\n                }\n                if (obj.y <= boundary || obj.y >= canvasHeight - boundary) {\n                    obj.vy = -obj.vy;  // Perfect reflection maintains speed\n                    obj.y = Math.max(boundary, Math.min(canvasHeight - boundary, obj.y));\n                }\n            }\n        });\n    }\n    \n    // Record current state\n    recordState() {\n        // Record each object's position and type\n        this.objects.forEach(obj => {\n            this.dataLog.molecularData.push([this.time, [obj.x, obj.y, obj.unique_name || obj.type]]);\n        });\n        \n        // Record summary statistics\n        const summary = this.getSummary();\n        this.dataLog.summary.push([this.time, summary]);\n        this.dataLog.time.push(this.time);\n    }\n    \n    // Clear data log\n    clearDataLog() {\n        this.dataLog = {\n            time: [],\n            molecularData: [],\n            summary: []\n        };\n    }\n    \n    // Control simulation\n    start() {\n        this.isRunning = true;\n        \n        // Initialize objects if we're in live mode and don't have objects yet\n        if (this.playbackState.mode === 'live' && this.objects.length === 0) {\n            this.initializeObjects();\n        }\n    }\n    \n    pause() {\n        this.isRunning = false;\n        this.pausePlayback();\n    }\n    \n    // Reset simulation\n    reset() {\n        this.time = 0;\n        this.lastRecordTime = 0;\n        this.isRunning = false;\n        this.playbackState.currentTime = 0;\n        this.playbackState.isPlaying = false;\n        \n        // Cancel any ongoing pre-calculation and clear old data\n        this.isPreCalculating = false;\n        \n        // MEMORY LEAK FIX: Properly clear old pre-calculated data before new simulation\n        // This ensures we don't accumulate data across multiple simulation runs\n        this.preCalculatedData = {\n            timePoints: [],\n            particleData: [],\n            summaryData: [],\n            averagedData: [],\n            isGenerated: false,\n            totalDuration: this.parameters.timeframe\n        };\n        \n        // Clear data log\n        this.clearDataLog();\n        \n        this.initializeObjects();\n    }\n    \n    // Get current molecular objects (for rendering)\n    getCurrentObjects() {\n        if (this.playbackState.mode === 'playback') {\n            return this.getParticlesAtTime(this.playbackState.currentTime);\n        }\n        return this.objects;\n    }\n    \n    // Get summary statistics\n    getSummary() {\n        const summary = {};\n        const currentObjects = this.getCurrentObjects();\n        \n        ['E', 'S', 'I', 'P', 'ES', 'EI', 'ESI'].forEach(type => {\n            summary[type] = currentObjects.filter(obj => obj.type === type).length;\n        });\n        \n        return summary;\n    }\n    \n    // Get final velocity based on pre-calculated simulation results\n    getFinalVelocity() {\n        if (!this.preCalculatedData.isGenerated || this.preCalculatedData.summaryData.length === 0) {\n            return 0;\n        }\n        \n        // Get the final summary data (last entry)\n        const finalSummary = this.preCalculatedData.summaryData[this.preCalculatedData.summaryData.length - 1][1];\n        const finalProductParticles = finalSummary.P || 0;\n        \n        // Calculate velocity: (particles × 0.1 mM) / timeframe\n        const velocity = (finalProductParticles * 0.1) / this.parameters.timeframe;\n        \n        return velocity;\n    }\n    \n    // Get memory usage statistics for debugging\n    getMemoryStats() {\n        const stats = {\n            objectCount: this.objects.length,\n            // ESSENTIAL DATA (needed for simulation functionality):\n            timePointsCount: this.preCalculatedData.timePoints.length, // Needed for both views\n            particleDataCount: this.preCalculatedData.particleData.length, // Essential for molecular view\n            summaryDataCount: this.preCalculatedData.summaryData.length, // Essential for plot view  \n            averagedDataCount: this.preCalculatedData.averagedData ? this.preCalculatedData.averagedData.length : 0, // Essential for CSV export\n            // TEMPORARY DATA (cleared between simulations):\n            dataLogTime: this.dataLog.time.length,\n            dataLogMolecular: this.dataLog.molecularData.length,\n            dataLogSummary: this.dataLog.summary.length,\n            // STATUS:\n            isPreCalculating: this.isPreCalculating,\n            isGenerated: this.preCalculatedData.isGenerated,\n            // MEMORY LEAK INDICATOR (should always be undefined now):\n            hasIndividualRuns: this.preCalculatedData.hasOwnProperty('individualRuns')\n        };\n        \n        // Estimate memory usage of essential data only\n        const estimatedMemoryMB = (\n            stats.particleDataCount * 100 + // Particle positions for molecular view\n            stats.summaryDataCount * 50 +    // Concentration data for plot view\n            stats.averagedDataCount * 50 +   // Averaged data for export\n            stats.dataLogMolecular * 50      // Temporary log data\n        ) / 1024 / 1024;\n        \n        stats.estimatedMemoryMB = estimatedMemoryMB.toFixed(2);\n        \n        return stats;\n    }\n\n    // Calculate velocity by running a quick simulation (without storing playback data)\n    calculateVelocityOnly() {\n        // Save current state\n        const originalTime = this.time;\n        const originalObjects = [...this.objects];\n        \n        // Reset and initialize for quick calculation\n        this.time = 0;\n        this.initializeObjects();\n        \n        // Run simulation to completion without storing intermediate data\n        while (this.time < this.parameters.timeframe) {\n            this.simulateStepForPreCalculation(this.parameters.time_step);\n            this.time += this.parameters.time_step;\n        }\n        \n        // Count final products\n        const finalProductCount = this.objects.filter(obj => obj.type === 'P').length;\n        \n        // Calculate velocity: (particles × 0.1 mM) / timeframe\n        const velocity = (finalProductCount * 0.1) / this.parameters.timeframe;\n        \n        // Restore original state\n        this.time = originalTime;\n        this.objects = originalObjects;\n        \n        return velocity;\n    }\n    \n    // Export to CSV format (browser-compatible)\n    exportToCSV() {\n        // Export from pre-calculated data if available\n        if (this.preCalculatedData.isGenerated) {\n            let csvContent = 'time(ms),x,y,object_name\\n';\n            \n            this.preCalculatedData.particleData.forEach(([time, particles]) => {\n                particles.forEach(particle => {\n                    csvContent += `${time.toFixed(4)},${particle.x.toFixed(2)},${particle.y.toFixed(2)},${particle.unique_name}\\n`;\n                });\n            });\n            \n            return csvContent;\n        }\n        \n        // Fall back to live data\n        let csvContent = 'time(ms),x,y,object_name\\n';\n        \n        this.dataLog.molecularData.forEach(point => {\n            const time = point[0].toFixed(4);\n            const x = point[1][0].toFixed(2);\n            const y = point[1][1].toFixed(2);\n            const objectName = point[1][2];\n            csvContent += `${time},${x},${y},${objectName}\\n`;\n        });\n        \n        return csvContent;\n    }\n    \n    // Export summary statistics to CSV\n    exportSummaryToCSV() {\n        // Export from pre-calculated data if available\n        if (this.preCalculatedData.isGenerated) {\n            let csvContent = 'time(ms),E,S,I,P,ES,EI,ESI\\n';\n            \n            this.preCalculatedData.summaryData.forEach(([time, summary]) => {\n                const row = [\n                    time.toFixed(4),\n                    summary.E || 0,\n                    summary.S || 0,\n                    summary.I || 0,\n                    summary.P || 0,\n                    summary.ES || 0,\n                    summary.EI || 0,\n                    summary.ESI || 0\n                ];\n                csvContent += row.join(',') + '\\n';\n            });\n            \n            return csvContent;\n        }\n        \n        // Fall back to live data\n        let csvContent = 'time(ms),E,S,I,P,ES,EI,ESI\\n';\n        \n        this.dataLog.summary.forEach(([time, summary]) => {\n            const row = [\n                time.toFixed(4),\n                summary.E || 0,\n                summary.S || 0,\n                summary.I || 0,\n                summary.P || 0,\n                summary.ES || 0,\n                summary.EI || 0,\n                summary.ESI || 0\n            ];\n            csvContent += row.join(',') + '\\n';\n        });\n        \n        return csvContent;\n    }\n} ","/**\n * Molecular Visualization Renderer for Enzyme Kinetics\n * Updated to support CSV-driven playback animation\n * Based on structure.md specifications for molecular representation\n */\n\nexport class MolecularRenderer {\n    constructor(canvas, onResizeComplete = null) {\n        this.canvas = canvas;\n        this.ctx = canvas ? canvas.getContext('2d') : null;\n        this.animationId = null;\n        this.particleSimulator = null;\n        this.lastTime = performance.now();\n        this.onResizeComplete = onResizeComplete; // Callback for when resize is finished\n        this.lastViewSwitchTime = null; // Track when view switches occur\n        \n        // ResizeObserver for robust container monitoring\n        this.resizeObserver = null;\n        this.setupResizeObserver();\n        \n        if (this.canvas) {\n            this.setupCanvas();\n        }\n    }\n\n    setupResizeObserver() {\n        if (this.canvas && window.ResizeObserver) {\n            this.resizeObserver = new ResizeObserver((entries) => {\n                for (let entry of entries) {\n                    // Debounce resize calls\n                    clearTimeout(this.resizeTimeout);\n                    this.resizeTimeout = setTimeout(() => {\n                        this.handleResize();\n                        \n                        // Only trigger reset callback for genuine window resizes, not view switches\n                        // Check both the flag and ensure sufficient time has passed since last view switch\n                        const now = performance.now();\n                        const timeSinceLastViewSwitch = this.lastViewSwitchTime ? now - this.lastViewSwitchTime : Infinity;\n                        const isGenuineResize = !window.appState?.isSwitchingViews && timeSinceLastViewSwitch > 1000;\n                        \n                        if (this.onResizeComplete && isGenuineResize) {\n                            console.log('MolecularRenderer: Triggering reset callback for genuine resize');\n                            this.onResizeComplete();\n                        } else if (!isGenuineResize) {\n                            console.log('MolecularRenderer: Skipping reset callback - view switch in progress or recent');\n                        }\n                    }, 200); // Increased debounce time for better stability\n                }\n            });\n            \n            // Only observe the canvas element to reduce duplicate events\n            this.resizeObserver.observe(this.canvas);\n        }\n    }\n\n    setupCanvas() {\n        if (!this.canvas) return;\n        \n        // Get the actual displayed size of the canvas (computed by CSS)\n        const rect = this.canvas.getBoundingClientRect();\n        \n        // Ensure reasonable canvas size with proper fallbacks\n        const width = Math.max(rect.width || 800, 300);\n        const height = Math.max(rect.height || 400, 200);\n        \n        // Set the internal size to match the displayed size\n        this.canvas.width = width * window.devicePixelRatio;\n        this.canvas.height = height * window.devicePixelRatio;\n        \n        // CRITICAL FIX: Reset transformation matrix before scaling to prevent accumulation\n        // Setting canvas.width/height already resets the context, but we explicitly reset transform\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0); // Reset to identity matrix\n        \n        // Scale the context to ensure correct drawing operations\n        this.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n        \n        // Don't set explicit display size - let CSS handle it\n        // this.canvas.style.width = width + 'px';\n        // this.canvas.style.height = height + 'px';\n        \n        console.log(`Molecular canvas resized: ${width}x${height} (ratio: ${window.devicePixelRatio})`);\n        \n        // Update simulation bounds immediately\n        this.updateSimulationBounds(width, height);\n    }\n\n    updateSimulationBounds(width, height) {\n        // Update particle simulator canvas dimensions if available\n        if (this.particleSimulator) {\n            this.particleSimulator.setParameters({\n                canvas_width: width,\n                canvas_height: height\n            });\n            \n            // Constrain any existing particles to new bounds\n            this.constrainParticlesToBounds(width, height);\n        }\n    }\n\n    constrainParticlesToBounds(width, height) {\n        if (!this.particleSimulator) return;\n        \n        // Skip constraint operation during view switches to prevent visible particle jumps\n        if (window.appState?.isSwitchingViews) {\n            console.log('Skipping particle constraint during view switch');\n            return;\n        }\n        \n        // Calculate responsive boundary based on largest molecule size\n        const referenceWidth = 800;\n        \n        // Use same scaling logic as speeds and binding distances\n        let scaleFactor;\n        if (width >= 800) {\n            scaleFactor = 1.0; // Desktop - full boundary\n        } else if (width >= 600) {\n            scaleFactor = 0.6; // Tablet - moderately reduced\n        } else {\n            scaleFactor = 0.3; // Mobile - reduced (30% boundary)\n        }\n        \n        const largestMoleculeRadius = 20; // ESI complex base size\n        const boundary = Math.max(5, largestMoleculeRadius * scaleFactor);\n        \n        const particles = this.particleSimulator.getCurrentObjects();\n        let constrainedCount = 0;\n        \n        // For high object counts, process in batches to avoid blocking\n        if (particles.length > 500) {\n            this.constrainParticlesBatched(particles, width, height, boundary);\n            return;\n        }\n        \n        // Process normally for smaller object counts\n        particles.forEach(particle => {\n            let wasConstrained = false;\n            \n            // Constrain X coordinates\n            if (particle.x < boundary) {\n                particle.x = boundary;\n                wasConstrained = true;\n            } else if (particle.x > width - boundary) {\n                particle.x = width - boundary;\n                wasConstrained = true;\n            }\n            \n            // Constrain Y coordinates\n            if (particle.y < boundary) {\n                particle.y = boundary;\n                wasConstrained = true;\n            } else if (particle.y > height - boundary) {\n                particle.y = height - boundary;\n                wasConstrained = true;\n            }\n            \n            if (wasConstrained) constrainedCount++;\n        });\n        \n        if (constrainedCount > 0) {\n            console.log(`Constrained ${constrainedCount} particles to new canvas bounds: ${width}x${height} (boundary: ${boundary.toFixed(1)}px)`);\n        }\n    }\n\n    /**\n     * Constraint particles in batches to avoid blocking for high object counts\n     */\n    constrainParticlesBatched(particles, width, height, boundary) {\n        const batchSize = 100;\n        let currentIndex = 0;\n        let constrainedCount = 0;\n        \n        const processBatch = () => {\n            const endIndex = Math.min(currentIndex + batchSize, particles.length);\n            \n            for (let i = currentIndex; i < endIndex; i++) {\n                const particle = particles[i];\n                let wasConstrained = false;\n                \n                // Constrain X coordinates\n                if (particle.x < boundary) {\n                    particle.x = boundary;\n                    wasConstrained = true;\n                } else if (particle.x > width - boundary) {\n                    particle.x = width - boundary;\n                    wasConstrained = true;\n                }\n                \n                // Constrain Y coordinates\n                if (particle.y < boundary) {\n                    particle.y = boundary;\n                    wasConstrained = true;\n                } else if (particle.y > height - boundary) {\n                    particle.y = height - boundary;\n                    wasConstrained = true;\n                }\n                \n                if (wasConstrained) constrainedCount++;\n            }\n            \n            currentIndex = endIndex;\n            \n            if (currentIndex < particles.length) {\n                // Process next batch on next frame\n                requestAnimationFrame(processBatch);\n            } else {\n                // All batches processed\n                if (constrainedCount > 0) {\n                    console.log(`Batched constraint: ${constrainedCount} particles constrained to bounds: ${width}x${height}`);\n                }\n            }\n        };\n        \n        // Start processing\n        requestAnimationFrame(processBatch);\n    }\n\n    /**\n     * Draw a single molecule at given position with proper styling\n     * Colors and sizes based on structure.md specifications\n     */\n    drawMolecule(x, y, type, label) {\n        const colors = {\n            'E': '#3498db',           // E - Blue\n            'S': '#2ecc71',           // S - Green  \n            'P': '#f39c12',           // P - Orange\n            'I': '#e74c3c',           // I - Red\n            'ES': '#9b59b6',          // ES - Purple\n            'EI': '#8b0000',          // EI - Dark red\n            'ESI': '#663399'          // ESI - Deep purple\n        };\n        \n        // Base sizes for desktop (800px width reference)\n        const baseSizes = {\n            'E': 15,    // Enzyme\n            'S': 10,    // Substrate\n            'P': 10,    // Product\n            'I': 10,    // Inhibitor\n            'ES': 18,   // ES complex (larger)\n            'EI': 18,   // EI complex (larger)\n            'ESI': 20   // ESI complex (largest)\n        };\n\n        // Calculate responsive scale factor based on canvas width\n        const rect = this.canvas.getBoundingClientRect();\n        const canvasWidth = rect.width || 800;\n        \n        // Use same scaling logic as speeds and binding distances\n        let scaleFactor;\n        if (canvasWidth >= 800) {\n            scaleFactor = 1.0; // Desktop - full size\n        } else if (canvasWidth >= 600) {\n            scaleFactor = 0.6; // Tablet - moderately reduced\n        } else {\n            scaleFactor = 0.3; // Mobile - reduced (30% size)\n        }\n        \n        const color = colors[type] || '#ffffff';\n        const baseRadius = baseSizes[type] || 10;\n        const radius = Math.max(5, baseRadius * scaleFactor); // Minimum radius of 5px\n\n        this.ctx.save();\n        \n        // Main molecule circle\n        this.ctx.beginPath();\n        this.ctx.arc(x, y, radius, 0, Math.PI * 2);\n        this.ctx.fillStyle = color;\n        this.ctx.fill();\n        \n        // Inner gradient for 3D effect\n        const gradient = this.ctx.createRadialGradient(\n            x - radius/3, y - radius/3, 0,\n            x, y, radius\n        );\n        gradient.addColorStop(0, 'rgba(255,255,255,0.6)');\n        gradient.addColorStop(1, color);\n        this.ctx.fillStyle = gradient;\n        this.ctx.fill();\n        \n        // Outline\n        this.ctx.strokeStyle = 'rgba(255,255,255,0.8)';\n        this.ctx.lineWidth = 1;\n        this.ctx.stroke();\n        \n        // Label with clear contrast\n        this.ctx.fillStyle = '#000000';\n        this.ctx.font = `${Math.max(10, radius * 0.6)}px Arial`;\n        this.ctx.textAlign = 'center';\n        this.ctx.textBaseline = 'middle';\n        \n        // Draw text without outline\n        this.ctx.fillText(label || type, x, y);\n        \n        this.ctx.restore();\n    }\n\n    /**\n     * Main render loop - supports both live and playback modes\n     */\n    render(particleSimulator, currentTime) {\n        if (!particleSimulator) return;\n        \n        const deltaTime = (currentTime - this.lastTime) / 1000;\n        this.lastTime = currentTime;\n\n        // Update playback if in playback mode\n        if (particleSimulator.playbackState.mode === 'playback') {\n            particleSimulator.updatePlayback(deltaTime);\n        }\n\n        // Clear canvas and draw background\n        this.drawBackground();\n        \n        // Get current particles (from live simulation or playback data)\n        const particles = particleSimulator.getCurrentObjects();\n        \n        // Draw all particles at their actual positions\n        particles.forEach(particle => {\n            this.drawMolecule(\n                particle.x, \n                particle.y, \n                particle.type, \n                particle.type  // Show only molecule type (E, S, I, P, ES, EI, ESI) without numbers\n            );\n        });\n        \n        // Draw simulation info overlay - DISABLED FOR PRODUCTION\n        // this.drawSimulationInfo(particleSimulator);\n        \n        // Draw velocity profile chart if available\n        this.drawVelocityProfileChart();\n    }\n\n    /**\n     * Draw simulation information overlay\n     */\n    drawSimulationInfo(particleSimulator) {\n        const rect = this.canvas.getBoundingClientRect();\n        const summary = particleSimulator.getSummary();\n        \n        this.ctx.save();\n        \n        // Responsive sizing for mobile\n        const isMobile = rect.width < 768;\n        const panelWidth = isMobile ? Math.min(250, rect.width - 20) : 280;\n        const panelHeight = isMobile ? 140 : 160;\n        const fontSize = isMobile ? 12 : 14;\n        const smallFontSize = isMobile ? 10 : 12;\n        \n        // Position in top-left to avoid overlap with view buttons\n        const panelX = 10;\n        const panelY = 10;\n        \n        // Main info panel\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.85)';\n        this.ctx.fillRect(panelX, panelY, panelWidth, panelHeight);\n        \n        // Panel border for better visibility\n        this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';\n        this.ctx.lineWidth = 1;\n        this.ctx.strokeRect(panelX, panelY, panelWidth, panelHeight);\n        \n        // Title\n        this.ctx.fillStyle = '#ffffff';\n        this.ctx.font = `bold ${fontSize}px Arial`;\n        this.ctx.textAlign = 'left';\n        \n        let y = panelY + 20;\n        \n        // Simulation status\n        this.ctx.fillStyle = '#3c78d8';\n        this.ctx.fillText('📺 SIMULATION', panelX + 5, y);\n        y += isMobile ? 16 : 20;\n        \n        // Time display\n        this.ctx.fillStyle = '#ffffff';\n        this.ctx.font = `bold ${smallFontSize}px Arial`;\n        \n        // Always show playback info since we're always in playback mode\n        const currentTime = particleSimulator.playbackState.currentTime;\n        const totalTime = particleSimulator.preCalculatedData.totalDuration;\n        const playing = particleSimulator.playbackState.isPlaying;\n        \n        const timeText = isMobile ? \n            `${Math.round(currentTime)}ms/${Math.round(totalTime)}ms` : \n            `Time: ${Math.round(currentTime)}ms / ${Math.round(totalTime)}ms`;\n        this.ctx.fillText(timeText, panelX + 5, y);\n        y += isMobile ? 14 : 18;\n        \n        const playText = isMobile ? \n            `${playing ? '▶️' : '⏸️'}` : \n            `${playing ? '▶️ Playing' : '⏸️ Paused'}`;\n        this.ctx.fillText(playText, panelX + 5, y);\n        y += isMobile ? 16 : 20;\n        \n        // Molecular counts\n        this.ctx.fillText('Molecules:', panelX + 5, y);\n        y += isMobile ? 14 : 18;\n        \n        const colors = {\n            'E': '#3498db', 'S': '#2ecc71', 'P': '#f39c12', 'I': '#e74c3c',\n            'ES': '#9b59b6', 'EI': '#8b0000', 'ESI': '#993370'\n        };\n        \n        // Show molecular counts in compact format for mobile\n        if (isMobile) {\n            // Compact grid layout for mobile\n            const activeTypes = Object.entries(summary).filter(([type, count]) => count > 0);\n            const itemsPerRow = 3;\n            let x = panelX + 5;\n            let rowIndex = 0;\n            \n            activeTypes.forEach(([type, count], index) => {\n                if (index > 0 && index % itemsPerRow === 0) {\n                    rowIndex++;\n                    x = panelX + 5;\n                    y += 16;\n                }\n                \n                // Draw colored circle indicator\n                this.ctx.fillStyle = colors[type] || '#ffffff';\n                this.ctx.beginPath();\n                this.ctx.arc(x + 8, y - 3, 4, 0, Math.PI * 2);\n                this.ctx.fill();\n                \n                // Draw text\n                this.ctx.fillStyle = '#ffffff';\n                this.ctx.font = `${smallFontSize - 1}px Arial`;\n                this.ctx.fillText(`${type}:${count}`, x + 15, y);\n                \n                x += 75; // Move to next column\n            });\n                    } else {\n            // Standard layout for desktop\n            Object.entries(summary).forEach(([type, count]) => {\n                if (count > 0) {\n                    // Draw colored circle indicator\n                    this.ctx.fillStyle = colors[type] || '#ffffff';\n                    this.ctx.beginPath();\n                    this.ctx.arc(panelX + 15, y - 4, 6, 0, Math.PI * 2);\n                    this.ctx.fill();\n                    \n                    // Draw text\n                    this.ctx.fillStyle = '#ffffff';\n                    this.ctx.fillText(`${type}: ${count}`, panelX + 30, y);\n                    y += 16;\n                }\n            });\n        }\n        \n        this.ctx.restore();\n    }\n\n    /**\n     * Draw background\n     */\n    drawBackground() {\n        const rect = this.canvas.getBoundingClientRect();\n        \n        // Clear canvas\n        this.ctx.clearRect(0, 0, rect.width, rect.height);\n\n        // Draw background gradient\n        const bgGradient = this.ctx.createRadialGradient(\n            rect.width / 2, rect.height / 2, 0,\n            rect.width / 2, rect.height / 2, rect.width / 2\n        );\n        bgGradient.addColorStop(0, 'rgba(236, 240, 241, 1)');   // Light gray center\n        bgGradient.addColorStop(1, 'rgba(189, 195, 199, 1)');   // Darker gray edges\n        this.ctx.fillStyle = bgGradient;\n        this.ctx.fillRect(0, 0, rect.width, rect.height);\n        \n        // Add subtle grid pattern\n        this.ctx.strokeStyle = 'rgba(189, 195, 199, 0.3)';\n        this.ctx.lineWidth = 1;\n        \n        // Vertical lines\n        for (let x = 0; x < rect.width; x += 50) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(x, 0);\n            this.ctx.lineTo(x, rect.height);\n            this.ctx.stroke();\n        }\n        \n        // Horizontal lines\n        for (let y = 0; y < rect.height; y += 50) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(0, y);\n            this.ctx.lineTo(rect.width, y);\n            this.ctx.stroke();\n        }\n    }\n\n    /**\n     * Start animation loop\n     */\n    startAnimation(particleSimulator) {\n        this.particleSimulator = particleSimulator;\n        \n        const animate = (currentTime) => {\n            this.render(particleSimulator, currentTime);\n            \n            // Trigger progress bar updates (same as main simulation loop)\n            if (window.updatePlaybackControlsState) {\n                window.updatePlaybackControlsState();\n            }\n            if (window.updateParameterDisplay) {\n                window.updateParameterDisplay();\n            }\n            \n            this.animationId = requestAnimationFrame(animate);\n        };\n        \n        this.lastTime = performance.now();\n        this.animationId = requestAnimationFrame(animate);\n    }\n\n    /**\n     * Stop animation\n     */\n    stopAnimation() {\n        if (this.animationId) {\n            cancelAnimationFrame(this.animationId);\n            this.animationId = null;\n        }\n        this.particleSimulator = null;\n    }\n\n    /**\n     * Render a single frame without starting animation (for showing initial state)\n     */\n    renderSingleFrame(particleSimulator) {\n        if (!particleSimulator) {\n            console.log('No particle simulator provided to renderSingleFrame');\n            return;\n        }\n        \n        this.particleSimulator = particleSimulator;\n        \n        // Clear canvas and draw background\n        this.drawBackground();\n        \n        // Get current particles (initial state)\n        const particles = particleSimulator.getCurrentObjects();\n        console.log('Rendering single frame with', particles.length, 'particles');\n        \n        // Draw all particles at their initial positions\n        particles.forEach(particle => {\n            this.drawMolecule(\n                particle.x, \n                particle.y, \n                particle.type, \n                particle.type  // Show only molecule type (E, S, I, P, ES, EI, ESI) without numbers\n            );\n        });\n        \n        // Draw simulation info overlay (but simplified for initial state) - DISABLED FOR PRODUCTION\n        // if (particles.length > 0) {\n        //     this.drawInitialStateInfo(particleSimulator);\n        // }\n    }\n\n    /**\n     * Draw simplified info for initial state (before simulation starts)\n     */\n    drawInitialStateInfo(particleSimulator) {\n        const rect = this.canvas.getBoundingClientRect();\n        const summary = particleSimulator.getSummary();\n        \n        this.ctx.save();\n        \n        // Responsive sizing for mobile\n        const isMobile = rect.width < 768;\n        const panelWidth = isMobile ? Math.min(200, rect.width - 20) : 220;\n        const panelHeight = isMobile ? 100 : 120;\n        const fontSize = isMobile ? 11 : 13;\n        \n        // Position in top-left\n        const panelX = 10;\n        const panelY = 10;\n        \n        // Main info panel\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.85)';\n        this.ctx.fillRect(panelX, panelY, panelWidth, panelHeight);\n        \n        // Panel border\n        this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';\n        this.ctx.lineWidth = 1;\n        this.ctx.strokeRect(panelX, panelY, panelWidth, panelHeight);\n        \n        // Title\n        this.ctx.fillStyle = '#3c78d8';\n        this.ctx.font = `bold ${fontSize}px Arial`;\n        this.ctx.textAlign = 'left';\n        this.ctx.fillText('⚡ INITIAL STATE', panelX + 5, panelY + 18);\n        \n        // Molecular counts\n        this.ctx.fillStyle = '#ffffff';\n        this.ctx.font = `${fontSize - 1}px Arial`;\n        this.ctx.fillText('Ready to simulate:', panelX + 5, panelY + 35);\n        \n        const colors = {\n            'E': '#3498db', 'S': '#2ecc71', 'P': '#f39c12', 'I': '#e74c3c',\n            'ES': '#9b59b6', 'EI': '#8b0000', 'ESI': '#993370'\n        };\n        \n        let y = panelY + 50;\n        const activeTypes = Object.entries(summary).filter(([type, count]) => count > 0);\n        \n        activeTypes.slice(0, 4).forEach(([type, count], index) => {\n            if (index % 2 === 0 && index > 0) y += 15;\n            const x = panelX + 5 + (index % 2) * 90;\n            \n            // Draw colored circle\n            this.ctx.fillStyle = colors[type] || '#ffffff';\n            this.ctx.beginPath();\n            this.ctx.arc(x + 8, y - 3, 4, 0, Math.PI * 2);\n            this.ctx.fill();\n            \n            // Draw text\n            this.ctx.fillStyle = '#ffffff';\n            this.ctx.fillText(`${type}:${count}`, x + 15, y);\n        });\n        \n        this.ctx.restore();\n        \n        // Draw velocity profile chart if available\n        this.drawVelocityProfileChart();\n    }\n\n    /**\n     * Draw velocity profile chart in left bottom corner\n     */\n    drawVelocityProfileChart() {\n        // Check if velocity profile data is available and chart is visible\n        if (!window.velocityProfileData || window.velocityProfileData.length === 0 || !window.velocityProfileChartVisible) {\n            return;\n        }\n        \n        console.log('Rendering velocity chart with', window.velocityProfileData.length, 'data points');\n\n        const data = window.velocityProfileData;\n        const rect = this.canvas.getBoundingClientRect();\n        \n        this.ctx.save();\n        \n        // Responsive sizing\n        const isMobile = rect.width < 768;\n        const chartWidth = isMobile ? 250 : 320;\n        const chartHeight = isMobile ? 160 : 200;\n        const fontSize = isMobile ? 10 : 12;\n        \n        // Position in left bottom corner with margin\n        const chartX = 20;\n        const chartY = this.canvas.height - chartHeight - 20;\n        \n        // Chart area (leaving space for labels)\n        const plotX = chartX + 40;\n        const plotY = chartY + 20;\n        const plotWidth = chartWidth - 60;\n        const plotHeight = chartHeight - 60;\n        \n        // Background\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.95)';\n        this.ctx.fillRect(chartX, chartY, chartWidth, chartHeight);\n        \n        // Border\n        this.ctx.strokeStyle = '#333333';\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(chartX, chartY, chartWidth, chartHeight);\n        \n        // Title\n        this.ctx.fillStyle = '#333333';\n        this.ctx.font = `bold ${fontSize + 2}px Arial`;\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText('Velocity vs Substrate', chartX + chartWidth / 2, chartY + 15);\n        \n        // Calculate data ranges\n        const maxSubstrate = Math.max(...data.map(d => d.substrateConcentration));\n        const maxVelocity = Math.max(...data.map(d => d.velocity));\n        const minVelocity = Math.min(...data.map(d => d.velocity));\n        \n        // Draw axes\n        this.ctx.strokeStyle = '#666666';\n        this.ctx.lineWidth = 1;\n        \n        // X-axis\n        this.ctx.beginPath();\n        this.ctx.moveTo(plotX, plotY + plotHeight);\n        this.ctx.lineTo(plotX + plotWidth, plotY + plotHeight);\n        this.ctx.stroke();\n        \n        // Y-axis\n        this.ctx.beginPath();\n        this.ctx.moveTo(plotX, plotY);\n        this.ctx.lineTo(plotX, plotY + plotHeight);\n        this.ctx.stroke();\n        \n        // Grid lines\n        this.ctx.setLineDash([1, 1]);\n        this.ctx.strokeStyle = '#cccccc';\n        \n        // Vertical grid lines\n        for (let i = 1; i < 5; i++) {\n            const x = plotX + (plotWidth * i / 5);\n            this.ctx.beginPath();\n            this.ctx.moveTo(x, plotY);\n            this.ctx.lineTo(x, plotY + plotHeight);\n            this.ctx.stroke();\n        }\n        \n        // Horizontal grid lines\n        for (let i = 1; i < 4; i++) {\n            const y = plotY + (plotHeight * i / 4);\n            this.ctx.beginPath();\n            this.ctx.moveTo(plotX, y);\n            this.ctx.lineTo(plotX + plotWidth, y);\n            this.ctx.stroke();\n        }\n        \n        this.ctx.setLineDash([]);\n        \n        // Draw data line\n        this.ctx.strokeStyle = '#e74c3c';\n        this.ctx.lineWidth = 2;\n        this.ctx.beginPath();\n        \n        let firstPoint = true;\n        data.forEach((point) => {\n            const x = plotX + (point.substrateConcentration / maxSubstrate) * plotWidth;\n            const y = plotY + plotHeight - ((point.velocity - minVelocity) / (maxVelocity - minVelocity)) * plotHeight;\n            \n            if (firstPoint) {\n                this.ctx.moveTo(x, y);\n                firstPoint = false;\n            } else {\n                this.ctx.lineTo(x, y);\n            }\n        });\n        \n        this.ctx.stroke();\n        \n        // Draw data points\n        this.ctx.fillStyle = '#c0392b';\n        data.forEach((point) => {\n            const x = plotX + (point.substrateConcentration / maxSubstrate) * plotWidth;\n            const y = plotY + plotHeight - ((point.velocity - minVelocity) / (maxVelocity - minVelocity)) * plotHeight;\n            \n            this.ctx.beginPath();\n            this.ctx.arc(x, y, 2, 0, Math.PI * 2);\n            this.ctx.fill();\n        });\n        \n        // Labels\n        this.ctx.fillStyle = '#333333';\n        this.ctx.font = `${fontSize}px Arial`;\n        this.ctx.textAlign = 'center';\n        \n        // X-axis label\n        this.ctx.fillText('Substrate (mM)', plotX + plotWidth / 2, chartY + chartHeight - 5);\n        \n        // Y-axis label\n        this.ctx.save();\n        this.ctx.translate(chartX + 12, plotY + plotHeight / 2);\n        this.ctx.rotate(-Math.PI / 2);\n        this.ctx.fillText('Velocity (mM·ms⁻¹)', 0, 0);\n        this.ctx.restore();\n        \n        // Axis values\n        this.ctx.font = `${fontSize - 1}px Arial`;\n        \n        // X-axis values\n        this.ctx.textAlign = 'center';\n        for (let i = 0; i <= 5; i++) {\n            const value = (maxSubstrate * i / 5);\n            const x = plotX + (plotWidth * i / 5);\n            this.ctx.fillText(value.toFixed(0), x, plotY + plotHeight + 12);\n        }\n        \n        // Y-axis values\n        this.ctx.textAlign = 'right';\n        for (let i = 0; i <= 4; i++) {\n            const value = minVelocity + (maxVelocity - minVelocity) * (1 - i / 4);\n            const y = plotY + (plotHeight * i / 4) + 3;\n            this.ctx.fillText(value.toFixed(3), plotX - 5, y);\n        }\n        \n        this.ctx.restore();\n    }\n\n    /**\n     * Export velocity profile chart as PNG\n     */\n    exportVelocityChartAsPNG(filename = 'velocity_profile_chart.png') {\n        // Check if velocity profile data is available\n        if (!window.velocityProfileData || window.velocityProfileData.length === 0) {\n            console.warn('No velocity profile data available for PNG export');\n            return;\n        }\n\n        const data = window.velocityProfileData;\n        \n        // Create off-screen canvas for chart export\n        const exportCanvas = document.createElement('canvas');\n        const exportCtx = exportCanvas.getContext('2d');\n        \n        // Set canvas size for high-quality export\n        const chartWidth = 800;\n        const chartHeight = 600;\n        exportCanvas.width = chartWidth;\n        exportCanvas.height = chartHeight;\n        \n        // Chart area dimensions (leaving space for labels and title)\n        const plotX = 80;\n        const plotY = 60;\n        const plotWidth = chartWidth - 120;\n        const plotHeight = chartHeight - 120;\n        \n        // White background\n        exportCtx.fillStyle = '#ffffff';\n        exportCtx.fillRect(0, 0, chartWidth, chartHeight);\n        \n        // Title\n        exportCtx.fillStyle = '#333333';\n        exportCtx.font = 'bold 24px Arial';\n        exportCtx.textAlign = 'center';\n        exportCtx.fillText('Velocity vs Substrate Concentration', chartWidth / 2, 35);\n        \n        // Calculate data ranges\n        const maxSubstrate = Math.max(...data.map(d => d.substrateConcentration));\n        const maxVelocity = Math.max(...data.map(d => d.velocity));\n        const minVelocity = 0;\n        \n        // Draw axes\n        exportCtx.strokeStyle = '#333333';\n        exportCtx.lineWidth = 2;\n        exportCtx.beginPath();\n        // Y-axis\n        exportCtx.moveTo(plotX, plotY);\n        exportCtx.lineTo(plotX, plotY + plotHeight);\n        // X-axis\n        exportCtx.moveTo(plotX, plotY + plotHeight);\n        exportCtx.lineTo(plotX + plotWidth, plotY + plotHeight);\n        exportCtx.stroke();\n        \n        // Draw grid lines\n        exportCtx.strokeStyle = '#e0e0e0';\n        exportCtx.lineWidth = 1;\n        \n        // Vertical grid lines\n        for (let i = 1; i <= 5; i++) {\n            const x = plotX + (plotWidth * i / 5);\n            exportCtx.beginPath();\n            exportCtx.moveTo(x, plotY);\n            exportCtx.lineTo(x, plotY + plotHeight);\n            exportCtx.stroke();\n        }\n        \n        // Horizontal grid lines\n        for (let i = 1; i <= 4; i++) {\n            const y = plotY + (plotHeight * i / 4);\n            exportCtx.beginPath();\n            exportCtx.moveTo(plotX, y);\n            exportCtx.lineTo(plotX + plotWidth, y);\n            exportCtx.stroke();\n        }\n        \n        // Plot data points and line\n        exportCtx.strokeStyle = '#e74c3c';\n        exportCtx.fillStyle = '#e74c3c';\n        exportCtx.lineWidth = 3;\n        \n        // Draw line connecting points\n        exportCtx.beginPath();\n        data.forEach((point, index) => {\n            const x = plotX + (point.substrateConcentration / maxSubstrate) * plotWidth;\n            const y = plotY + plotHeight - ((point.velocity - minVelocity) / (maxVelocity - minVelocity)) * plotHeight;\n            \n            if (index === 0) {\n                exportCtx.moveTo(x, y);\n            } else {\n                exportCtx.lineTo(x, y);\n            }\n        });\n        exportCtx.stroke();\n        \n        // Draw data points\n        data.forEach((point) => {\n            const x = plotX + (point.substrateConcentration / maxSubstrate) * plotWidth;\n            const y = plotY + plotHeight - ((point.velocity - minVelocity) / (maxVelocity - minVelocity)) * plotHeight;\n            \n            exportCtx.beginPath();\n            exportCtx.arc(x, y, 4, 0, Math.PI * 2);\n            exportCtx.fill();\n        });\n        \n        // Labels\n        exportCtx.fillStyle = '#333333';\n        exportCtx.font = '18px Arial';\n        exportCtx.textAlign = 'center';\n        \n        // X-axis label\n        exportCtx.fillText('Substrate Concentration (mM)', plotX + plotWidth / 2, chartHeight - 15);\n        \n        // Y-axis label\n        exportCtx.save();\n        exportCtx.translate(25, plotY + plotHeight / 2);\n        exportCtx.rotate(-Math.PI / 2);\n        exportCtx.fillText('Velocity (mM·ms⁻¹)', 0, 0);\n        exportCtx.restore();\n        \n        // Axis values\n        exportCtx.font = '14px Arial';\n        \n        // X-axis values\n        exportCtx.textAlign = 'center';\n        for (let i = 0; i <= 5; i++) {\n            const value = (maxSubstrate * i / 5);\n            const x = plotX + (plotWidth * i / 5);\n            exportCtx.fillText(value.toFixed(0), x, plotY + plotHeight + 20);\n        }\n        \n        // Y-axis values\n        exportCtx.textAlign = 'right';\n        for (let i = 0; i <= 4; i++) {\n            const value = minVelocity + (maxVelocity - minVelocity) * (1 - i / 4);\n            const y = plotY + (plotHeight * i / 4) + 6;\n            exportCtx.fillText(value.toFixed(3), plotX - 10, y);\n        }\n        \n        // Download the image\n        try {\n            exportCanvas.toBlob((blob) => {\n                if (blob) {\n                    const url = URL.createObjectURL(blob);\n                    const link = document.createElement('a');\n                    link.href = url;\n                    link.download = filename;\n                    link.style.display = 'none';\n                    document.body.appendChild(link);\n                    link.click();\n                    document.body.removeChild(link);\n                    URL.revokeObjectURL(url);\n                    console.log(`Velocity profile chart exported as ${filename}`);\n                } else {\n                    console.error('Failed to create blob for PNG export');\n                }\n            }, 'image/png');\n        } catch (error) {\n            console.error('Error exporting velocity chart as PNG:', error);\n        }\n    }\n\n    /**\n     * Reset renderer\n     */\n    reset() {\n        // Clear canvas\n        if (this.canvas) {\n            const rect = this.canvas.getBoundingClientRect();\n            this.ctx.clearRect(0, 0, rect.width, rect.height);\n            this.drawBackground();\n        }\n    }\n\n    /**\n     * Handle canvas resize\n     */\n    handleResize() {\n        this.setupCanvas();\n    }\n\n    /**\n     * Notify renderer that a view switch is occurring to prevent unnecessary resets\n     */\n    notifyViewSwitch() {\n        this.lastViewSwitchTime = performance.now();\n        console.log('MolecularRenderer: View switch notification received');\n    }\n\n    /**\n     * Cleanup method to remove observers\n     */\n    destroy() {\n        if (this.resizeObserver) {\n            this.resizeObserver.disconnect();\n            this.resizeObserver = null;\n        }\n        \n        if (this.animationId) {\n            cancelAnimationFrame(this.animationId);\n            this.animationId = null;\n        }\n        \n        clearTimeout(this.resizeTimeout);\n    }\n} ","/**\n * Time-Course Concentration Plot Renderer for Enzyme Kinetics\n * \n * Shows substrate and product concentrations over time (0-500ms)\n * with smooth glowing curves responsive to simulation progress\n */\n\nexport class PlotRenderer {\n    constructor(canvas, onResizeComplete = null) {\n        this.canvas = canvas;\n        this.ctx = canvas ? canvas.getContext('2d') : null;\n        this.onResizeComplete = onResizeComplete; // Callback for when resize is finished\n        this.animationId = null;\n        this.lastTime = performance.now();\n        this.lastViewSwitchTime = null; // Track when view switches occur\n        \n        // ResizeObserver for robust container monitoring\n        this.resizeObserver = null;\n        this.setupResizeObserver();\n        \n        if (this.canvas) {\n            this.setupCanvas();\n        }\n        \n        // Time-course plot configuration\n        this.config = {\n            colors: {\n                substrate: '#2ecc71',        // Glowing green for substrate\n                product: '#f1c40f',          // Glowing yellow for product\n                background: '#ffffff',\n                gridLines: '#ecf0f1',\n                axisColor: '#2c3e50',\n                textColor: '#2c3e50'\n            },\n            plot: {\n                lineWidth: 3,\n                glowWidth: 8,\n                margins: {\n                    top: 40,\n                    right: 60,\n                    bottom: 100, // Increased to account for video controls overlay\n                    left: 80\n                }\n            }\n        };\n\n        // Plot bounds - Time course from 0-500ms\n        this.plotBounds = {\n            xMin: 0, xMax: 500,      // Time: 0-500 ms\n            yMin: 0, yMax: 10        // Concentration: 0-10 mM (will auto-adjust)\n        };\n\n        // Data storage for smooth curves\n        this.timePoints = [];\n        this.substrateData = [];\n        this.productData = [];\n        this.currentTime = 0;\n        this.simulationData = null;\n\n        this.setupCanvas();\n    }\n\n    setupCanvas() {\n        if (!this.canvas) return;\n        \n        // Get the actual displayed size of the canvas (computed by CSS)\n        const rect = this.canvas.getBoundingClientRect();\n        \n        // Ensure reasonable canvas size with proper fallbacks\n        const width = Math.max(rect.width || 800, 300);\n        const height = Math.max(rect.height || 400, 200);\n        \n        // Set the internal size to match the displayed size\n        this.canvas.width = width * window.devicePixelRatio;\n        this.canvas.height = height * window.devicePixelRatio;\n        \n        // CRITICAL FIX: Reset transformation matrix before scaling to prevent accumulation\n        // Setting canvas.width/height already resets the context, but we explicitly reset transform\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0); // Reset to identity matrix\n        \n        // Scale the context to ensure correct drawing operations\n        this.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n        \n        // Don't set explicit display size - let CSS handle it\n        // this.canvas.style.width = width + 'px';\n        // this.canvas.style.height = height + 'px';\n        \n        console.log(`Plot canvas resized: ${width}x${height} (ratio: ${window.devicePixelRatio})`);\n    }\n\n    setupResizeObserver() {\n        if (this.canvas && window.ResizeObserver) {\n            this.resizeObserver = new ResizeObserver((entries) => {\n                for (let entry of entries) {\n                    // Debounce resize calls\n                    clearTimeout(this.resizeTimeout);\n                    this.resizeTimeout = setTimeout(() => {\n                        this.handleResize();\n                        \n                        // Only trigger reset callback for genuine window resizes, not view switches\n                        // Check both the flag and ensure sufficient time has passed since last view switch\n                        const now = performance.now();\n                        const timeSinceLastViewSwitch = this.lastViewSwitchTime ? now - this.lastViewSwitchTime : Infinity;\n                        const isGenuineResize = !window.appState?.isSwitchingViews && timeSinceLastViewSwitch > 1000;\n                        \n                        if (this.onResizeComplete && isGenuineResize) {\n                            console.log('PlotRenderer: Triggering reset callback for genuine resize');\n                            this.onResizeComplete();\n                        } else if (!isGenuineResize) {\n                            console.log('PlotRenderer: Skipping reset callback - view switch in progress or recent');\n                        }\n                    }, 200); // Increased debounce time for better stability\n                }\n            });\n            \n            // Only observe the canvas element to reduce duplicate events\n            this.resizeObserver.observe(this.canvas);\n        }\n    }\n\n    /**\n     * Load simulation data for time-course plotting\n     */\n    loadSimulationData(particleSimulator) {\n        if (!particleSimulator) {\n            console.warn('PlotRenderer: No particle simulator provided');\n            return false;\n        }\n        \n        if (!particleSimulator.preCalculatedData.isGenerated) {\n            console.log('PlotRenderer: Pre-calculated data not ready yet, will retry when available');\n            // Clear any existing data to show empty plot\n            this.timePoints = [];\n            this.substrateData = [];\n            this.productData = [];\n            this.simulationData = { loaded: false };\n            return false;\n        }\n        \n        // Use averaged data for plot rendering (smoother curves without spikes)\n        const summaryData = particleSimulator.preCalculatedData.averagedData || particleSimulator.preCalculatedData.summaryData;\n        if (!summaryData || summaryData.length === 0) {\n            console.warn('PlotRenderer: No summary data available');\n            return false;\n        }\n        \n        const numRuns = particleSimulator.preCalculatedData.individualRuns ? particleSimulator.preCalculatedData.individualRuns.length : 1;\n        console.log(`PlotRenderer: Using averaged data from ${numRuns} runs for smooth plotting`);\n        \n        const scale_factor = 10; // 10 particles per mM\n        \n        // Clear previous data\n        this.timePoints = [];\n        this.substrateData = [];\n        this.productData = [];\n        \n        // Process simulation data\n        for (const [time, summary] of summaryData) {\n            if (time <= 500) { // Only use data up to 500ms\n                // Calculate concentrations including bound molecules (like in export)\n                const freeSubstrate = summary.S || 0;\n                const esComplexes = summary.ES || 0;\n                const esiComplexes = summary.ESI || 0;\n                const productObjects = summary.P || 0;\n                \n                // Total substrate = free + bound in complexes\n                const totalSubstrate = (freeSubstrate + esComplexes + esiComplexes) / scale_factor;\n                const productConcentration = productObjects / scale_factor;\n                \n                this.timePoints.push(time);\n                this.substrateData.push(totalSubstrate);\n                this.productData.push(productConcentration);\n            }\n        }\n        \n        // Auto-adjust Y axis bounds\n        const maxConcentration = Math.max(...this.substrateData, ...this.productData);\n        this.plotBounds.yMax = Math.max(maxConcentration * 1.1, 1); // Add 10% padding\n        \n        this.simulationData = { loaded: true };\n        console.log(`PlotRenderer: Loaded ${this.timePoints.length} data points for time-course plot`);\n        return true;\n    }\n\n    /**\n     * Update velocity points for Michaelis-Menten plot\n     */\n    updateVelocityPoints(substrate, velocity) {\n        // Safety checks\n        if (!isFinite(substrate) || !isFinite(velocity) || substrate < 0 || velocity < 0) {\n            return;\n        }\n\n        // Find if we already have a point for this substrate concentration\n        const existingPoint = this.velocityPoints.find(p => \n            Math.abs(p.substrate - substrate) < 0.1\n        );\n\n        if (existingPoint) {\n            // Update with averaged velocity\n            existingPoint.velocity = (existingPoint.velocity + velocity) / 2;\n            existingPoint.count++;\n        } else {\n            // Add new point\n            this.velocityPoints.push({\n                substrate: substrate,\n                velocity: velocity,\n                count: 1\n            });\n        }\n\n        // Sort by substrate concentration\n        this.velocityPoints.sort((a, b) => a.substrate - b.substrate);\n\n        // Limit points for performance\n        if (this.velocityPoints.length > 100) { // Reduced from 200\n            this.velocityPoints = this.velocityPoints.slice(-100);\n        }\n    }\n\n    /**\n     * Convert data coordinates to screen coordinates\n     */\n    dataToScreen(dataX, dataY) {\n        const rect = this.canvas.getBoundingClientRect();\n        const plotWidth = rect.width - this.config.plots.margins.left - this.config.plots.margins.right;\n        const plotHeight = rect.height - this.config.plots.margins.top - this.config.plots.margins.bottom;\n\n        const screenX = this.config.plots.margins.left + \n            (dataX - this.plotBounds.xMin) / (this.plotBounds.xMax - this.plotBounds.xMin) * plotWidth;\n        \n        const screenY = this.config.plots.margins.top + plotHeight - \n            (dataY - this.plotBounds.yMin) / (this.plotBounds.yMax - this.plotBounds.yMin) * plotHeight;\n\n        return { x: screenX, y: screenY };\n    }\n\n    /**\n     * Draw plot axes and grid\n     */\n    drawAxes(xLabel, yLabel) {\n        const ctx = this.ctx;\n        const rect = this.canvas.getBoundingClientRect();\n        \n        ctx.strokeStyle = this.config.colors.axisColor;\n        ctx.lineWidth = 2;\n        ctx.font = '12px Arial';\n        ctx.fillStyle = this.config.colors.textColor;\n\n        // Draw axes\n        const leftX = this.config.plots.margins.left;\n        const rightX = rect.width - this.config.plots.margins.right;\n        const topY = this.config.plots.margins.top;\n        const bottomY = rect.height - this.config.plots.margins.bottom;\n\n        // X-axis\n        ctx.beginPath();\n        ctx.moveTo(leftX, bottomY);\n        ctx.lineTo(rightX, bottomY);\n        ctx.stroke();\n\n        // Y-axis\n        ctx.beginPath();\n        ctx.moveTo(leftX, topY);\n        ctx.lineTo(leftX, bottomY);\n        ctx.stroke();\n\n        // Draw grid and labels\n        this.drawGrid();\n        this.drawAxisLabels(xLabel, yLabel);\n    }\n\n    /**\n     * Draw grid lines\n     */\n    drawGrid() {\n        const ctx = this.ctx;\n        const rect = this.canvas.getBoundingClientRect();\n        \n        ctx.strokeStyle = this.config.colors.gridLines;\n        ctx.lineWidth = 1;\n        ctx.globalAlpha = this.config.plots.gridAlpha;\n\n        const leftX = this.config.plots.margins.left;\n        const rightX = rect.width - this.config.plots.margins.right;\n        const topY = this.config.plots.margins.top;\n        const bottomY = rect.height - this.config.plots.margins.bottom;\n\n        // Vertical grid lines (X-axis divisions)\n        const xSteps = 10;\n        for (let i = 0; i <= xSteps; i++) {\n            const x = leftX + (rightX - leftX) * i / xSteps;\n            ctx.beginPath();\n            ctx.moveTo(x, topY);\n            ctx.lineTo(x, bottomY);\n            ctx.stroke();\n\n            // X-axis labels\n            const xValue = this.plotBounds.xMin + (this.plotBounds.xMax - this.plotBounds.xMin) * i / xSteps;\n            ctx.fillStyle = this.config.colors.textColor;\n            ctx.textAlign = 'center';\n            ctx.fillText(xValue.toFixed(1), x, bottomY + 20);\n        }\n\n        // Horizontal grid lines (Y-axis divisions)\n        const ySteps = 8;\n        for (let i = 0; i <= ySteps; i++) {\n            const y = topY + (bottomY - topY) * i / ySteps;\n            ctx.beginPath();\n            ctx.moveTo(leftX, y);\n            ctx.lineTo(rightX, y);\n            ctx.stroke();\n\n            // Y-axis labels\n            const yValue = this.plotBounds.yMax - (this.plotBounds.yMax - this.plotBounds.yMin) * i / ySteps;\n            ctx.fillStyle = this.config.colors.textColor;\n            ctx.textAlign = 'right';\n            ctx.fillText(yValue.toFixed(1), leftX - 10, y + 4);\n        }\n\n        ctx.globalAlpha = 1.0;\n    }\n\n    /**\n     * Draw axis labels\n     */\n    drawAxisLabels(xLabel, yLabel) {\n        const ctx = this.ctx;\n        const rect = this.canvas.getBoundingClientRect();\n        \n        ctx.font = 'bold 14px Arial';\n        ctx.fillStyle = this.config.colors.textColor;\n        ctx.textAlign = 'center';\n\n        // X-axis label\n        ctx.fillText(xLabel, rect.width / 2, rect.height - 10);\n\n        // Y-axis label (rotated)\n        ctx.save();\n        ctx.translate(15, rect.height / 2);\n        ctx.rotate(-Math.PI / 2);\n        ctx.fillText(yLabel, 0, 0);\n        ctx.restore();\n    }\n\n    /**\n     * Draw line chart for data series\n     */\n    drawLineSeries(data, xKey, yKey, color, label) {\n        if (data.length < 2) return;\n\n        const ctx = this.ctx;\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this.config.plots.lineWidth;\n        ctx.globalAlpha = 0.8;\n\n        ctx.beginPath();\n        let firstPoint = true;\n\n        data.forEach(point => {\n            const screenPos = this.dataToScreen(point[xKey], point[yKey]);\n            \n            if (firstPoint) {\n                ctx.moveTo(screenPos.x, screenPos.y);\n                firstPoint = false;\n            } else {\n                ctx.lineTo(screenPos.x, screenPos.y);\n            }\n        });\n\n        ctx.stroke();\n        ctx.globalAlpha = 1.0;\n    }\n\n    /**\n     * Draw scatter plot points\n     */\n    drawScatterPoints(data, xKey, yKey, color) {\n        const ctx = this.ctx;\n        ctx.fillStyle = color;\n        ctx.globalAlpha = 0.7;\n\n        data.forEach(point => {\n            const screenPos = this.dataToScreen(point[xKey], point[yKey]);\n            \n            ctx.beginPath();\n            ctx.arc(screenPos.x, screenPos.y, this.config.plots.pointSize, 0, 2 * Math.PI);\n            ctx.fill();\n        });\n\n        ctx.globalAlpha = 1.0;\n    }\n\n    /**\n     * Draw theoretical Michaelis-Menten curve\n     */\n    drawTheoreticalCurve(simulationEngine) {\n        const ctx = this.ctx;\n        const points = [];\n        \n        // Generate theoretical curve points\n        for (let s = this.plotBounds.xMin; s <= this.plotBounds.xMax; s += 0.1) {\n            const tempState = { ...simulationEngine.state, substrate: s };\n            const tempEngine = { ...simulationEngine, state: tempState };\n            const velocity = tempEngine.calculateVelocity.call(tempEngine);\n            points.push({ substrate: s, velocity: velocity });\n        }\n\n        // Draw curve\n        ctx.strokeStyle = this.config.colors.theoretical;\n        ctx.lineWidth = 1;\n        ctx.globalAlpha = 0.5;\n        ctx.setLineDash([5, 5]);\n\n        ctx.beginPath();\n        let firstPoint = true;\n\n        points.forEach(point => {\n            const screenPos = this.dataToScreen(point.substrate, point.velocity);\n            \n            if (firstPoint) {\n                ctx.moveTo(screenPos.x, screenPos.y);\n                firstPoint = false;\n            } else {\n                ctx.lineTo(screenPos.x, screenPos.y);\n            }\n        });\n\n        ctx.stroke();\n        ctx.setLineDash([]);\n        ctx.globalAlpha = 1.0;\n    }\n\n    /**\n     * Draw legend\n     */\n    drawLegend(items) {\n        const ctx = this.ctx;\n        const rect = this.canvas.getBoundingClientRect();\n        \n        const legendX = rect.width - this.config.plots.margins.right - 150;\n        const legendY = this.config.plots.margins.top + 10;\n        const lineHeight = 20;\n\n        // Legend background\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n        ctx.fillRect(legendX - 10, legendY - 5, 140, items.length * lineHeight + 10);\n        ctx.strokeStyle = this.config.colors.gridLines;\n        ctx.strokeRect(legendX - 10, legendY - 5, 140, items.length * lineHeight + 10);\n\n        // Legend items\n        ctx.font = '12px Arial';\n        items.forEach((item, index) => {\n            const y = legendY + index * lineHeight;\n            \n            // Color indicator\n            ctx.fillStyle = item.color;\n            ctx.fillRect(legendX, y - 6, 15, 12);\n            \n            // Label\n            ctx.fillStyle = this.config.colors.textColor;\n            ctx.fillText(item.label, legendX + 20, y + 4);\n        });\n    }\n\n    /**\n     * Draw progress curves ([S], [P], [ES] vs time)\n     */\n    drawProgressPlot(simulationEngine) {\n        // Set plot bounds for time-based data\n        this.plotBounds = {\n            xMin: 0,\n            xMax: Math.max(60, simulationEngine.time + 5),\n            yMin: 0,\n            yMax: Math.max(10, Math.max(\n                simulationEngine.state.substrate * 1.2,\n                simulationEngine.state.product * 1.2\n            ))\n        };\n\n        // Clear and draw axes\n        this.drawAxes('Time (ms)', 'Concentration (mM)');\n\n        // Draw data series\n        if (this.dataHistory.length > 1) {\n            this.drawLineSeries(this.dataHistory, 'time', 'substrate', this.config.colors.substrate, 'Substrate');\n            this.drawLineSeries(this.dataHistory, 'time', 'product', this.config.colors.product, 'Product');\n            this.drawLineSeries(this.dataHistory, 'time', 'enzymeSubstrate', this.config.colors.enzymeSubstrate, 'ES Complex');\n        }\n\n        // Draw legend\n        this.drawLegend([\n            { color: this.config.colors.substrate, label: 'Substrate [S]' },\n            { color: this.config.colors.product, label: 'Product [P]' },\n            { color: this.config.colors.enzymeSubstrate, label: 'ES Complex' }\n        ]);\n    }\n\n    /**\n     * Draw velocity plot (v vs [S] Michaelis-Menten)\n     */\n    drawVelocityPlot(simulationEngine) {\n        // Set plot bounds for substrate vs velocity\n        const maxVelocity = simulationEngine.getApparentVmax();\n        const maxSubstrate = 140; // mM, updated maximum substrate concentration\n\n        this.plotBounds = {\n            xMin: 0,\n            xMax: maxSubstrate,\n            yMin: 0,\n            yMax: maxVelocity * 1.1\n        };\n\n        // Clear and draw axes\n        this.drawAxes('Substrate Concentration [S] (mM)', 'Velocity (μM·ms⁻¹)');\n\n        // Draw theoretical curve\n        this.drawTheoreticalCurve(simulationEngine);\n\n        // Draw experimental points\n        if (this.velocityPoints.length > 0) {\n            this.drawScatterPoints(this.velocityPoints, 'substrate', 'velocity', this.config.colors.velocity);\n        }\n\n        // Draw current point\n        const currentS = simulationEngine.state.substrate;\n        const currentV = simulationEngine.calculateVelocity();\n        const currentPos = this.dataToScreen(currentS, currentV);\n        \n        this.ctx.fillStyle = this.config.colors.velocity;\n        this.ctx.globalAlpha = 1.0;\n        this.ctx.beginPath();\n        this.ctx.arc(currentPos.x, currentPos.y, this.config.plots.pointSize * 1.5, 0, 2 * Math.PI);\n        this.ctx.fill();\n\n        // Draw legend\n        this.drawLegend([\n            { color: this.config.colors.theoretical, label: 'Theoretical Curve' },\n            { color: this.config.colors.velocity, label: 'Data Points' }\n        ]);\n    }\n\n    /**\n     * Main render function for time-course concentration plot\n     */\n    render(particleSimulator, currentTime = performance.now()) {\n        if (!this.canvas || !this.ctx || !particleSimulator) return;\n        \n        // Calculate delta time for playback advancement (same as molecular renderer)\n        const deltaTime = (currentTime - this.lastTime) / 1000;\n        this.lastTime = currentTime;\n\n        // Update playback if in playback mode (same as molecular renderer)\n        if (particleSimulator.playbackState.mode === 'playback') {\n            particleSimulator.updatePlayback(deltaTime);\n        }\n        \n        const rect = this.canvas.getBoundingClientRect();\n        \n        // Clear canvas\n        this.ctx.fillStyle = this.config.colors.background;\n        this.ctx.fillRect(0, 0, rect.width, rect.height);\n\n        // Load simulation data if not already loaded\n        if (!this.simulationData || !this.simulationData.loaded) {\n            const loaded = this.loadSimulationData(particleSimulator);\n            if (!loaded) {\n                // Show loading message or empty plot with axes\n                this.drawEmptyPlot();\n                return;\n            }\n        }\n\n        // Get current simulation time for progress indication\n        this.currentTime = particleSimulator.playbackState.currentTime || 0;\n\n        // Draw the time-course concentration plot\n        this.drawTimeCoursePlot();\n    }\n\n    /**\n     * Draw empty plot with axes when data is not ready\n     */\n    drawEmptyPlot() {\n        const rect = this.canvas.getBoundingClientRect();\n        const margins = this.getResponsiveMargins();\n        const plotWidth = rect.width - margins.left - margins.right;\n        const plotHeight = rect.height - margins.top - margins.bottom;\n\n        // Draw grid and axes for empty plot\n        this.drawGrid(plotWidth, plotHeight, margins);\n        this.drawAxes(plotWidth, plotHeight, margins);\n\n        // Show loading message\n        this.ctx.save();\n        this.ctx.fillStyle = this.config.colors.textColor;\n        this.ctx.font = '16px Arial';\n        this.ctx.textAlign = 'center';\n        this.ctx.textBaseline = 'middle';\n        this.ctx.fillText(\n            'Loading simulation data...', \n            margins.left + plotWidth / 2, \n            margins.top + plotHeight / 2\n        );\n        this.ctx.restore();\n\n        // Draw legend\n        this.drawLegend(margins);\n    }\n\n    /**\n     * Draw time-course concentration plot with progressive curves\n     */\n    drawTimeCoursePlot() {\n        if (this.timePoints.length === 0) return;\n\n        const rect = this.canvas.getBoundingClientRect();\n        const margins = this.getResponsiveMargins();\n        const plotWidth = rect.width - margins.left - margins.right;\n        const plotHeight = rect.height - margins.top - margins.bottom;\n\n        // Draw grid and axes\n        this.drawGrid(plotWidth, plotHeight, margins);\n        this.drawAxes(plotWidth, plotHeight, margins);\n\n        // Get data up to current simulation time\n        const { currentTimeData, currentSubstrateData, currentProductData } = this.getProgressiveData();\n\n        // Draw curves progressively (only up to current time)\n        if (currentTimeData.length > 0) {\n            this.drawGlowingCurve(currentTimeData, currentSubstrateData, this.config.colors.substrate, 'Substrate');\n            this.drawGlowingCurve(currentTimeData, currentProductData, this.config.colors.product, 'Product');\n        }\n\n        // Draw legend\n        this.drawLegend(margins);\n    }\n\n    /**\n     * Get responsive margins based on screen size to account for video controls\n     */\n    getResponsiveMargins() {\n        const baseMargins = this.config.plot.margins;\n        \n        // Adjust bottom margin based on screen size to account for video controls\n        if (window.innerWidth <= 768) {\n            // Mobile: video controls are smaller\n            return {\n                ...baseMargins,\n                bottom: 80 // Mobile video controls height + some padding\n            };\n        } else {\n            // Desktop: video controls are larger\n            return {\n                ...baseMargins,\n                bottom: 100 // Desktop video controls height + some padding\n            };\n        }\n    }\n\n    /**\n     * Draw glowing curve with smooth interpolation\n     */\n    drawGlowingCurve(timeData, concentrationData, color, label) {\n        if (timeData.length < 2) return;\n\n        const rect = this.canvas.getBoundingClientRect();\n        const margins = this.config.plot.margins;\n        const plotWidth = rect.width - margins.left - margins.right;\n        const plotHeight = rect.height - margins.top - margins.bottom;\n\n        // Create smooth curve path\n        this.ctx.save();\n        \n        // Draw glow effect first\n        this.ctx.globalCompositeOperation = 'screen';\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = this.config.plot.glowWidth;\n        this.ctx.shadowColor = color;\n        this.ctx.shadowBlur = 15;\n        \n        this.ctx.beginPath();\n        let isFirstPoint = true;\n        \n        for (let i = 0; i < timeData.length; i++) {\n            const x = margins.left + (timeData[i] / this.plotBounds.xMax) * plotWidth;\n            const y = margins.top + plotHeight - (concentrationData[i] / this.plotBounds.yMax) * plotHeight;\n            \n            if (isFirstPoint) {\n                this.ctx.moveTo(x, y);\n                isFirstPoint = false;\n            } else {\n                // Use quadratic curves for smooth interpolation\n                const prevX = margins.left + (timeData[i-1] / this.plotBounds.xMax) * plotWidth;\n                const prevY = margins.top + plotHeight - (concentrationData[i-1] / this.plotBounds.yMax) * plotHeight;\n                const cpX = (prevX + x) / 2;\n                const cpY = (prevY + y) / 2;\n                this.ctx.quadraticCurveTo(cpX, cpY, x, y);\n            }\n        }\n        this.ctx.stroke();\n\n        // Draw main line on top\n        this.ctx.globalCompositeOperation = 'source-over';\n        this.ctx.lineWidth = this.config.plot.lineWidth;\n        this.ctx.shadowBlur = 0;\n        \n        this.ctx.beginPath();\n        isFirstPoint = true;\n        \n        for (let i = 0; i < timeData.length; i++) {\n            const x = margins.left + (timeData[i] / this.plotBounds.xMax) * plotWidth;\n            const y = margins.top + plotHeight - (concentrationData[i] / this.plotBounds.yMax) * plotHeight;\n            \n            if (isFirstPoint) {\n                this.ctx.moveTo(x, y);\n                isFirstPoint = false;\n            } else {\n                const prevX = margins.left + (timeData[i-1] / this.plotBounds.xMax) * plotWidth;\n                const prevY = margins.top + plotHeight - (concentrationData[i-1] / this.plotBounds.yMax) * plotHeight;\n                const cpX = (prevX + x) / 2;\n                const cpY = (prevY + y) / 2;\n                this.ctx.quadraticCurveTo(cpX, cpY, x, y);\n            }\n        }\n        this.ctx.stroke();\n        \n        this.ctx.restore();\n    }\n\n    /**\n     * Get progressive data up to current simulation time\n     */\n    getProgressiveData() {\n        if (this.currentTime <= 0) {\n            return {\n                currentTimeData: [],\n                currentSubstrateData: [],\n                currentProductData: []\n            };\n        }\n\n        // Find all data points up to current time\n        const currentTimeData = [];\n        const currentSubstrateData = [];\n        const currentProductData = [];\n\n        for (let i = 0; i < this.timePoints.length; i++) {\n            if (this.timePoints[i] <= this.currentTime) {\n                currentTimeData.push(this.timePoints[i]);\n                currentSubstrateData.push(this.substrateData[i]);\n                currentProductData.push(this.productData[i]);\n            } else {\n                // Stop when we reach future time points\n                break;\n            }\n        }\n\n        return {\n            currentTimeData,\n            currentSubstrateData,\n            currentProductData\n        };\n    }\n\n    /**\n     * Start animation loop\n     */\n    startAnimation(particleSimulator) {\n        this.particleSimulator = particleSimulator;\n        \n        const animate = (currentTime) => {\n            // Pass currentTime to render method for proper playback advancement\n            this.render(particleSimulator, currentTime);\n            \n            // Trigger progress bar updates (same as main simulation loop)\n            if (window.updatePlaybackControlsState) {\n                window.updatePlaybackControlsState();\n            }\n            if (window.updateParameterDisplay) {\n                window.updateParameterDisplay();\n            }\n            \n            this.animationId = requestAnimationFrame(animate);\n        };\n        \n        this.lastTime = performance.now();\n        this.animationId = requestAnimationFrame(animate);\n    }\n\n    /**\n     * Stop animation\n     */\n    stopAnimation() {\n        if (this.animationId) {\n            cancelAnimationFrame(this.animationId);\n            this.animationId = null;\n        }\n    }\n\n    /**\n     * Reset plot data\n     */\n    reset() {\n        this.timePoints = [];\n        this.substrateData = [];\n        this.productData = [];\n        this.currentTime = 0;\n        this.simulationData = null;\n    }\n\n    /**\n     * Draw grid for the plot\n     */\n    drawGrid(plotWidth, plotHeight, margins) {\n        this.ctx.save();\n        this.ctx.strokeStyle = this.config.colors.gridLines;\n        this.ctx.lineWidth = 1;\n        this.ctx.globalAlpha = 0.5;\n\n        // Vertical grid lines (time)\n        const timeSteps = 5; // 5 grid lines for 0-500ms\n        for (let i = 0; i <= timeSteps; i++) {\n            const x = margins.left + (i / timeSteps) * plotWidth;\n            this.ctx.beginPath();\n            this.ctx.moveTo(x, margins.top);\n            this.ctx.lineTo(x, margins.top + plotHeight);\n            this.ctx.stroke();\n        }\n\n        // Horizontal grid lines (concentration)\n        const concSteps = 5; // 5 grid lines for concentration\n        for (let i = 0; i <= concSteps; i++) {\n            const y = margins.top + (i / concSteps) * plotHeight;\n            this.ctx.beginPath();\n            this.ctx.moveTo(margins.left, y);\n            this.ctx.lineTo(margins.left + plotWidth, y);\n            this.ctx.stroke();\n        }\n\n        this.ctx.restore();\n    }\n\n    /**\n     * Draw axes with labels\n     */\n    drawAxes(plotWidth, plotHeight, margins) {\n        this.ctx.save();\n        this.ctx.strokeStyle = this.config.colors.axisColor;\n        this.ctx.fillStyle = this.config.colors.textColor;\n        this.ctx.lineWidth = 2;\n        this.ctx.font = '12px Arial';\n\n        // X-axis\n        this.ctx.beginPath();\n        this.ctx.moveTo(margins.left, margins.top + plotHeight);\n        this.ctx.lineTo(margins.left + plotWidth, margins.top + plotHeight);\n        this.ctx.stroke();\n\n        // Y-axis\n        this.ctx.beginPath();\n        this.ctx.moveTo(margins.left, margins.top);\n        this.ctx.lineTo(margins.left, margins.top + plotHeight);\n        this.ctx.stroke();\n\n        // X-axis labels (time in ms)\n        this.ctx.textAlign = 'center';\n        this.ctx.textBaseline = 'top';\n        const timeSteps = 5;\n        for (let i = 0; i <= timeSteps; i++) {\n            const x = margins.left + (i / timeSteps) * plotWidth;\n            const timeValue = (i / timeSteps) * this.plotBounds.xMax;\n            this.ctx.fillText(`${timeValue.toFixed(0)}`, x, margins.top + plotHeight + 10);\n        }\n\n        // Y-axis labels (concentration in mM)\n        this.ctx.textAlign = 'right';\n        this.ctx.textBaseline = 'middle';\n        const concSteps = 5;\n        for (let i = 0; i <= concSteps; i++) {\n            const y = margins.top + plotHeight - (i / concSteps) * plotHeight;\n            const concValue = (i / concSteps) * this.plotBounds.yMax;\n            this.ctx.fillText(`${concValue.toFixed(1)}`, margins.left - 10, y);\n        }\n\n        // Axis titles\n        this.ctx.font = 'bold 14px Arial';\n        this.ctx.textAlign = 'center';\n        this.ctx.textBaseline = 'bottom';\n        this.ctx.fillText('Time (ms)', margins.left + plotWidth / 2, margins.top + plotHeight + 50);\n\n        this.ctx.save();\n        this.ctx.translate(15, margins.top + plotHeight / 2);\n        this.ctx.rotate(-Math.PI / 2);\n        this.ctx.fillText('Concentration (mM)', 0, 0);\n        this.ctx.restore();\n\n        this.ctx.restore();\n    }\n\n    /**\n     * Draw legend\n     */\n    drawLegend(margins) {\n        this.ctx.save();\n        this.ctx.font = '12px Arial';\n        this.ctx.textBaseline = 'middle';\n\n        const legendItems = [\n            { color: this.config.colors.substrate, label: 'Substrate' },\n            { color: this.config.colors.product, label: 'Product' }\n        ];\n\n        let y = margins.top + 20;\n        legendItems.forEach((item, index) => {\n            const x = margins.left + 20;\n            \n            // Draw colored line\n            this.ctx.strokeStyle = item.color;\n            this.ctx.lineWidth = 3;\n            this.ctx.beginPath();\n            this.ctx.moveTo(x, y);\n            this.ctx.lineTo(x + 20, y);\n            this.ctx.stroke();\n\n            // Draw label\n            this.ctx.fillStyle = this.config.colors.textColor;\n            this.ctx.textAlign = 'left';\n            this.ctx.fillText(item.label, x + 25, y);\n\n            y += 25;\n        });\n\n        this.ctx.restore();\n    }\n\n    /**\n     * Handle canvas resize\n     */\n    handleResize() {\n        this.setupCanvas();\n    }\n\n    /**\n     * Notify renderer that a view switch is occurring to prevent unnecessary resets\n     */\n    notifyViewSwitch() {\n        this.lastViewSwitchTime = performance.now();\n        console.log('PlotRenderer: View switch notification received');\n    }\n\n    /**\n     * Cleanup method to remove observers\n     */\n    destroy() {\n        if (this.resizeObserver) {\n            this.resizeObserver.disconnect();\n            this.resizeObserver = null;\n        }\n        \n        if (this.animationId) {\n            cancelAnimationFrame(this.animationId);\n            this.animationId = null;\n        }\n        \n        clearTimeout(this.resizeTimeout);\n    }\n\n    /**\n     * Export plot data for download\n     */\n    exportPlotData() {\n        const headers = ['Time (ms)', 'Substrate (mM)', 'Product (mM)'];\n        const rows = this.timePoints.map((time, index) => [\n            time.toFixed(3),\n            this.substrateData[index]?.toFixed(3) || '0.000',\n            this.productData[index]?.toFixed(3) || '0.000'\n            ]);\n            return [headers, ...rows];\n    }\n} ","/**\n * Velocity Profile Generator\n * \n * Generates velocity data across substrate concentration range\n * for Michaelis-Menten kinetic analysis\n */\n\nexport class VelocityProfileGenerator {\n    constructor(particleSimulator) {\n        if (!particleSimulator) {\n            throw new Error('VelocityProfileGenerator requires a valid particleSimulator');\n        }\n        \n        this.particleSimulator = particleSimulator;\n        this.isGenerating = false;\n        this.profileData = [];\n        \n        console.log('VelocityProfileGenerator constructor - particleSimulator valid:', !!particleSimulator);\n        console.log('VelocityProfileGenerator constructor - particleSimulator has setParameters:', typeof particleSimulator.setParameters === 'function');\n        console.log('VelocityProfileGenerator constructor - particleSimulator has simulateStepForPreCalculation:', typeof particleSimulator.simulateStepForPreCalculation === 'function');\n    }\n    \n    /**\n     * Generate velocity profile for substrate concentrations 5, 10, 15, ... 140 mM\n     */\n    async generateVelocityProfile(currentParameters, progressCallback = null) {\n        console.log('=== Starting generateVelocityProfile ===');\n        console.log('currentParameters received:', currentParameters);\n        console.log('progressCallback provided:', typeof progressCallback);\n        \n        if (this.isGenerating) {\n            console.warn('Velocity profile generation already in progress');\n            return null;\n        }\n        \n        this.isGenerating = true;\n        this.profileData = [];\n        console.log('Generation state set, isGenerating:', this.isGenerating);\n        \n        try {\n            console.log('Starting velocity profile generation...');\n            console.log('Initial simulator state:', {\n                time: this.particleSimulator.time,\n                playbackMode: this.particleSimulator.playbackState.mode,\n                isPreCalculating: this.particleSimulator.isPreCalculating,\n                parameters: this.particleSimulator.parameters\n            });\n            \n            // Store original parameters\n            const originalParams = { ...this.particleSimulator.parameters };\n            console.log('Stored original parameters:', originalParams);\n            \n            // Generate data for substrate concentrations: 5, 10, 15, ..., 140 mM\n            const substrateConcentrations = [];\n            for (let i = 5; i <= 140; i += 5) {\n                substrateConcentrations.push(i);\n            }\n            \n            console.log(`Testing ${substrateConcentrations.length} substrate concentrations:`, substrateConcentrations);\n            \n            const totalSteps = substrateConcentrations.length * 2; // 2 runs per concentration\n            let completedSteps = 0;\n            \n            for (let i = 0; i < substrateConcentrations.length; i++) {\n                const substrateConc = substrateConcentrations[i];\n                \n                try {\n                    console.log(`Calculating velocity for substrate concentration: ${substrateConc} mM (2 runs for averaging)`);\n                    \n                    // Update parameters with new substrate concentration\n                    const testParams = {\n                        ...currentParameters,\n                        S_concentration: substrateConc\n                    };\n                    \n                    console.log(`Setting parameters:`, testParams);\n                    \n                    // Set parameters in simulator\n                    this.particleSimulator.setParameters(testParams);\n                    \n                    console.log(`Parameters set. Current simulator params:`, this.particleSimulator.parameters);\n                    \n                    // Run 2 simulations and collect velocities for averaging\n                    const velocities = [];\n                    for (let run = 0; run < 2; run++) {\n                        try {\n                            console.log(`  Run ${run + 1}/2 for [S] = ${substrateConc} mM`);\n                            \n                            // Calculate velocity for this run\n                            const velocity = await this.calculateVelocityForConcentration();\n                            \n                            if (isNaN(velocity) || velocity < 0) {\n                                console.warn(`Invalid velocity calculated: ${velocity} for [S] = ${substrateConc} mM, run ${run + 1}`);\n                                throw new Error(`Invalid velocity: ${velocity}`);\n                            }\n                            \n                            velocities.push(velocity);\n                            \n                            completedSteps++;\n                            \n                            // Report progress for each individual run\n                            if (progressCallback) {\n                                const progress = (completedSteps / totalSteps) * 100;\n                                progressCallback(progress, substrateConc, velocity, run + 1);\n                            }\n                            \n                            // Small delay to prevent UI blocking\n                            await new Promise(resolve => setTimeout(resolve, 10));\n                            \n                        } catch (runError) {\n                            console.error(`Error in run ${run + 1} for [S] = ${substrateConc} mM:`, runError);\n                            throw runError;\n                        }\n                    }\n                    \n                    if (velocities.length === 0) {\n                        throw new Error(`No valid velocities calculated for [S] = ${substrateConc} mM`);\n                    }\n                    \n                    // Calculate average velocity from the 2 runs\n                    const averageVelocity = velocities.reduce((sum, v) => sum + v, 0) / velocities.length;\n                    \n                    console.log(`  Individual velocities: [${velocities.map(v => v.toFixed(4)).join(', ')}]`);\n                    console.log(`  Average velocity: ${averageVelocity.toFixed(4)} mM/s`);\n                    \n                    // Store averaged result\n                    this.profileData.push({\n                        substrateConcentration: substrateConc,\n                        velocity: averageVelocity,\n                        individualVelocities: velocities, // Store individual values for reference\n                        standardDeviation: this.calculateStandardDeviation(velocities)\n                    });\n                    \n                    console.log(`Successfully calculated velocity for [S] = ${substrateConc} mM`);\n                    \n                } catch (concentrationError) {\n                    console.error(`Failed to calculate velocity for [S] = ${substrateConc} mM:`, concentrationError);\n                    throw new Error(`Velocity calculation failed for substrate concentration ${substrateConc} mM: ${concentrationError.message}`);\n                }\n            }\n            \n            // Restore original parameters and state\n            console.log('Restoring original parameters...');\n            this.particleSimulator.setParameters(originalParams);\n            \n            // Re-initialize objects with original parameters\n            this.particleSimulator.initializeObjects();\n            \n            console.log(`Velocity profile generation completed successfully with ${this.profileData.length} data points`);\n            console.log('Profile data summary:', this.profileData.map(d => \n                `[S]=${d.substrateConcentration}mM: V=${d.velocity.toFixed(6)}mM/s`\n            ));\n            \n            console.log('=== generateVelocityProfile completed successfully ===');\n            console.log('Returning profile data with length:', this.profileData.length);\n            \n            return this.profileData;\n            \n        } catch (error) {\n            console.error('=== Error in generateVelocityProfile ===');\n            console.error('Error generating velocity profile:', error);\n            console.error('Error type:', typeof error);\n            console.error('Error constructor:', error.constructor.name);\n            throw error;\n        } finally {\n            console.log('=== generateVelocityProfile finally block ===');\n            this.isGenerating = false;\n            console.log('Generation state reset, isGenerating:', this.isGenerating);\n        }\n    }\n    \n    /**\n     * Calculate velocity for current concentration using quick simulation\n     */\n    async calculateVelocityForConcentration() {\n        try {\n            // Save current state\n            const originalTime = this.particleSimulator.time;\n            const originalPlaybackState = { ...this.particleSimulator.playbackState };\n            \n            // Reset simulation state for this calculation\n            this.particleSimulator.time = 0;\n            this.particleSimulator.playbackState.currentTime = 0;\n            this.particleSimulator.playbackState.isPlaying = false;\n            this.particleSimulator.playbackState.mode = 'live';\n            \n            // Initialize objects with current parameters\n            this.particleSimulator.initializeObjects();\n            \n            // Ensure we have valid timeframe and time_step\n            const timeframe = this.particleSimulator.parameters.timeframe || 500;\n            const timeStep = this.particleSimulator.parameters.time_step || 0.01;\n            \n            console.log(`  Running simulation for ${timeframe}ms with step ${timeStep}ms`);\n            \n            // Run simulation to completion with safety checks\n            let steps = 0;\n            const maxSteps = Math.ceil(timeframe / timeStep) + 100; // Safety buffer\n            \n            while (this.particleSimulator.time < timeframe && steps < maxSteps) {\n                this.particleSimulator.simulateStepForPreCalculation(timeStep);\n                this.particleSimulator.time += timeStep;\n                steps++;\n                \n                // Optional: log progress every 100 steps for debugging\n                if (steps % 100 === 0) {\n                    const productCount = this.particleSimulator.objects.filter(obj => obj.type === 'P').length;\n                    console.log(`    Step ${steps}: time=${this.particleSimulator.time.toFixed(1)}ms, products=${productCount}`);\n                }\n            }\n            \n            // Count final products\n            const finalProductCount = this.particleSimulator.objects.filter(obj => obj.type === 'P').length;\n            console.log(`  Final product count: ${finalProductCount} particles`);\n            \n            // Calculate velocity: (particles × 0.1 mM) / timeframe (in seconds)\n            const velocity = (finalProductCount * 0.1) / (timeframe / 1000); // Convert ms to seconds\n            \n            console.log(`  Calculated velocity: ${velocity.toFixed(6)} mM/s`);\n            \n            // Restore original state\n            this.particleSimulator.time = originalTime;\n            this.particleSimulator.playbackState = originalPlaybackState;\n            \n            // Re-initialize with restored state\n            this.particleSimulator.initializeObjects();\n            \n            return velocity;\n            \n        } catch (error) {\n            console.error('Error in calculateVelocityForConcentration:', error);\n            throw error;\n        }\n    }\n    \n    /**\n     * Calculate standard deviation of an array of values\n     */\n    calculateStandardDeviation(values) {\n        if (values.length < 2) return 0;\n        \n        const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n        const squaredDifferences = values.map(val => Math.pow(val - mean, 2));\n        const variance = squaredDifferences.reduce((sum, val) => sum + val, 0) / values.length;\n        \n        return Math.sqrt(variance);\n    }\n    \n    /**\n     * Export velocity profile data to CSV\n     */\n    exportToCSV() {\n        if (this.profileData.length === 0) {\n            console.warn('No velocity profile data to export');\n            return null;\n        }\n        \n        let csvContent = 'Substrate Concentration (mM),Average Velocity (mM/s),Standard Deviation,Run 1 Velocity,Run 2 Velocity\\n';\n        \n        this.profileData.forEach(dataPoint => {\n            const individualVels = dataPoint.individualVelocities || [dataPoint.velocity, dataPoint.velocity];\n            const stdDev = dataPoint.standardDeviation || 0;\n            csvContent += `${dataPoint.substrateConcentration},${dataPoint.velocity.toFixed(6)},${stdDev.toFixed(6)},${individualVels[0].toFixed(6)},${individualVels[1].toFixed(6)}\\n`;\n        });\n        \n        return csvContent;\n    }\n    \n    /**\n     * Download CSV file\n     */\n    downloadCSV(filename = 'velocity_profile.csv') {\n        const csvContent = this.exportToCSV();\n        if (!csvContent) return;\n        \n        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n        const link = document.createElement('a');\n        \n        if (link.download !== undefined) {\n            const url = URL.createObjectURL(blob);\n            link.setAttribute('href', url);\n            link.setAttribute('download', filename);\n            link.style.visibility = 'hidden';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    }\n    \n    /**\n     * Get current profile data\n     */\n    getProfileData() {\n        return [...this.profileData];\n    }\n    \n    /**\n     * Check if generation is in progress\n     */\n    isGeneratingProfile() {\n        return this.isGenerating;\n    }\n} ","/**\n * Michaelis-Menten Enzyme Kinetics Simulator - Main Application\n * \n * Coordinates simulation engine, molecular visualization, and plot rendering\n * according to guidelines/structure.md specifications\n * Updated to support CSV-driven playback animation\n */\n\nimport { SimulationEngine } from './simulation/SimulationEngine.js';\nimport { EnzymeKineticsSimulator } from './simulation/EnzymeKineticsSimulator.js';\nimport { MolecularRenderer } from './rendering/MolecularRenderer.js';\nimport { PlotRenderer } from './rendering/PlotRenderer.js';\nimport { VelocityProfileGenerator } from './analysis/index.js';\n\n// Application state for enzyme kinetics simulation\nconst appState = {\n    currentView: 'molecular',           // 'molecular', 'plots', 'split'\n    isSimulationRunning: false,\n    isSwitchingViews: false,            // Flag to prevent reset during view switches\n    simulationMode: 'playback',         // Always playback mode\n    lastViewSwitchTime: null,           // Track when view switches occur\n    parameters: {\n        substrate: 5.0,                 // mM\n        enzyme: 0.10,                   // mM\n        inhibitor: 0.0,                 // mM\n        inhibitionType: 'none'          // 'none', 'competitive', 'uncompetitive', 'noncompetitive'\n    }\n};\n\n// Make appState globally accessible for renderers\nwindow.appState = appState;\n\n// Parameter persistence functions\nfunction saveParametersToStorage() {\n    try {\n        const parametersToSave = {\n            substrate: appState.parameters.substrate,\n            enzyme: appState.parameters.enzyme,\n            inhibitor: appState.parameters.inhibitor,\n            inhibitionType: appState.parameters.inhibitionType\n        };\n        localStorage.setItem('enzymeKineticsParameters', JSON.stringify(parametersToSave));\n        console.log('Parameters saved to localStorage:', parametersToSave);\n    } catch (error) {\n        console.warn('Failed to save parameters to localStorage:', error);\n    }\n}\n\nfunction loadParametersFromStorage() {\n    try {\n        const savedParameters = localStorage.getItem('enzymeKineticsParameters');\n        if (savedParameters) {\n            const params = JSON.parse(savedParameters);\n            \n            // Validate and apply saved parameters\n            if (typeof params.substrate === 'number' && params.substrate >= 0 && params.substrate <= 140) {\n                appState.parameters.substrate = params.substrate;\n            }\n            if (typeof params.enzyme === 'number' && params.enzyme >= 0 && params.enzyme <= 1.0) {\n                appState.parameters.enzyme = params.enzyme;\n            }\n            if (typeof params.inhibitor === 'number' && params.inhibitor >= 0 && params.inhibitor <= 35) {\n                appState.parameters.inhibitor = params.inhibitor;\n            }\n            if (params.inhibitionType && ['none', 'competitive', 'uncompetitive', 'noncompetitive'].includes(params.inhibitionType)) {\n                appState.parameters.inhibitionType = params.inhibitionType;\n            }\n            \n            console.log('Parameters loaded from localStorage:', appState.parameters);\n            return true;\n        }\n    } catch (error) {\n        console.warn('Failed to load parameters from localStorage:', error);\n    }\n    return false;\n}\n\nfunction updateUIFromParameters() {\n    // Update substrate slider and display\n    if (substrateSlider && substrateValue) {\n        substrateSlider.value = appState.parameters.substrate;\n        substrateValue.textContent = `${appState.parameters.substrate.toFixed(1)} mM`;\n    }\n    \n    // Update enzyme slider and display\n    if (enzymeSlider && enzymeValue) {\n        enzymeSlider.value = appState.parameters.enzyme;\n        enzymeValue.textContent = `${appState.parameters.enzyme.toFixed(2)} mM`;\n    }\n    \n    // Update inhibitor type (radio buttons and mobile select)\n    inhibitorTypeRadios.forEach(radio => {\n        radio.checked = radio.value === appState.parameters.inhibitionType;\n    });\n    if (inhibitorSelect) {\n        inhibitorSelect.value = appState.parameters.inhibitionType;\n    }\n    \n    // Update inhibitor slider and display\n    if (inhibitorSlider && inhibitorValue) {\n        inhibitorSlider.value = appState.parameters.inhibitor;\n        inhibitorValue.textContent = `${appState.parameters.inhibitor.toFixed(1)} mM`;\n        // Enable/disable based on inhibition type\n        inhibitorSlider.disabled = appState.parameters.inhibitionType === 'none';\n    }\n    \n    console.log('UI updated with current parameters');\n}\n\n// Core components\nlet simulationEngine;          // Mathematical simulation for plots\nlet particleSimulator;         // Discrete particle simulation for molecular animation\nlet molecularRenderer;\nlet plotRenderer;\n\n// Analysis components\nlet velocityProfileGenerator;\n\n// DOM elements - Controls\nconst molecularViewBtn = document.getElementById('molecular-view-btn');\nconst plotsViewBtn = document.getElementById('plots-view-btn');\nconst substrateSlider = document.getElementById('substrate-slider');\nconst substrateValue = document.getElementById('substrate-value');\nconst enzymeSlider = document.getElementById('enzyme-slider');\nconst enzymeValue = document.getElementById('enzyme-value');\nconst inhibitorTypeRadios = document.querySelectorAll('input[name=\"inhibitor-type\"]');\nconst inhibitorSelect = document.getElementById('inhibitor-select');\nconst inhibitorSlider = document.getElementById('inhibitor-slider');\nconst inhibitorValue = document.getElementById('inhibitor-value');\nconst exportBtn = document.getElementById('export-btn');\nconst generateProfileBtn = document.getElementById('generate-profile-btn');\nconst toggleGraphBtn = document.getElementById('toggle-graph-btn');\n\n\n\n// Bottom control elements\nconst playPauseBtnBottom = document.getElementById('play-pause-btn-bottom');\nconst resetBtnBottom = document.getElementById('reset-btn-bottom');\nconst playbackTimeSliderBottom = document.getElementById('playback-time-slider-bottom');\nconst playbackTimeValueBottom = document.getElementById('playback-time-value-bottom');\n\n// DOM elements - Display\nconst molecularCanvas = document.getElementById('molecular-canvas');\nconst plotsCanvas = document.getElementById('plots-canvas');\nconst currentVelocity = document.getElementById('current-velocity');\nconst currentProduct = document.getElementById('current-product');\n\n/**\n * Initialize the simulation components\n */\nfunction initializeSimulation() {\n    try {\n        // Check if canvas elements exist\n        if (!molecularCanvas) {\n            console.error('Molecular canvas element not found');\n            return false;\n        }\n        \n        if (!plotsCanvas) {\n            console.error('Plots canvas element not found');\n            return false;\n        }\n\n        // Create simulation engines\n        simulationEngine = new SimulationEngine();\n        \n        // Initialize particle simulator with canvas dimensions\n        const canvasRect = molecularCanvas.getBoundingClientRect();\n        particleSimulator = new EnzymeKineticsSimulator({\n            canvas_width: canvasRect.width || 800,\n            canvas_height: canvasRect.height || 400\n        });\n        \n        // Switch to playback mode by default\n        particleSimulator.switchToPlaybackMode();\n        \n        // Create smart resize callback that resets on window resize but not view switches\n        const smartResizeCallback = () => {\n            // Reset on window resize, but not during view switches\n            if (!appState.isSwitchingViews) {\n                console.log('Window resize detected - resetting simulation');\n                resetSimulation();\n            } else {\n                console.log('View switch in progress - skipping resize reset');\n            }\n        };\n\n        // Create renderers with error checking\n        try {\n            molecularRenderer = new MolecularRenderer(molecularCanvas, smartResizeCallback);\n            // Initialize particle simulator with canvas dimensions\n            const rect = molecularCanvas.getBoundingClientRect();\n            particleSimulator.setParameters({\n                canvas_width: rect.width || 800,\n                canvas_height: rect.height || 400\n            });\n        } catch (error) {\n            console.error('Failed to create molecular renderer:', error);\n            return false;\n        }\n        \n        try {\n            plotRenderer = new PlotRenderer(plotsCanvas, smartResizeCallback);\n        } catch (error) {\n            console.error('Failed to create plot renderer:', error);\n            return false;\n        }\n        \n        // Set initial parameters\n        updateSimulationParameters();\n        \n        // Initial parameter display update\n        updateParameterDisplay();\n        \n        // Set initial view\n        updateViewMode();\n        \n        // Setup callback to render initial frame when objects are initialized\n        particleSimulator.onObjectsInitialized = () => {\n            if (molecularRenderer && (appState.currentView === 'molecular' || appState.currentView === 'split')) {\n                // Render initial frame to show starting state\n                molecularRenderer.renderSingleFrame(particleSimulator);\n                console.log('Rendered initial frame with', particleSimulator.objects.length, 'molecules');\n            }\n        };\n        \n        // Force initial object creation and rendering\n        particleSimulator.initializeObjects();\n        \n        // Initialize playback controls\n        initializePlaybackControls();\n        \n        // Initialize analysis components\n        console.log('Initializing VelocityProfileGenerator with particleSimulator:', !!particleSimulator);\n        velocityProfileGenerator = new VelocityProfileGenerator(particleSimulator);\n        console.log('VelocityProfileGenerator initialized:', !!velocityProfileGenerator);\n        \n        // Initialize global chart data\n        window.velocityProfileData = null;\n        window.velocityProfileChartVisible = false;\n        \n        console.log('Enzyme Kinetics Simulator initialized successfully');\n        return true;\n        \n    } catch (error) {\n        console.error('Failed to initialize simulation:', error);\n        return false;\n    }\n}\n\n/**\n * Initialize playback controls\n */\nfunction initializePlaybackControls() {\n    // Initial values are now set in initializeUI for video player controls\n    \n\n    \n    updatePlaybackControlsState();\n}\n\n/**\n * Format time values to milliseconds display format\n */\nfunction formatTime(seconds) {\n    return `${Math.round(seconds)}ms`;\n}\n\n/**\n * Update playback controls based on current mode\n */\nfunction updatePlaybackControlsState() {\n    // Keep playback controls enabled if simulation is running, even if data isn't ready yet\n    const isDataReady = particleSimulator && particleSimulator.preCalculatedData.isGenerated;\n    const shouldEnable = isDataReady || appState.isSimulationRunning;\n    \n    if (playbackTimeSliderBottom) playbackTimeSliderBottom.disabled = !shouldEnable;\n    \n    // Update display values if data is available\n    if (isDataReady) {\n        const currentTime = particleSimulator.playbackState.currentTime;\n        const totalTime = particleSimulator.preCalculatedData.totalDuration;\n        \n        if (playbackTimeSliderBottom) {\n            playbackTimeSliderBottom.value = currentTime;\n            playbackTimeSliderBottom.max = totalTime;\n        }\n        if (playbackTimeValueBottom) {\n            const currentFormatted = formatTime(currentTime);\n            const totalFormatted = formatTime(totalTime);\n            playbackTimeValueBottom.textContent = `${currentFormatted} / ${totalFormatted}`;\n        }\n    } else if (appState.isSimulationRunning) {\n        // Show loading state when simulation is running but data isn't ready\n        if (playbackTimeValueBottom) {\n            playbackTimeValueBottom.textContent = 'Loading...';\n        }\n    }\n}\n\n/**\n * Pre-calculate simulation for playback mode (automatically triggered on play)\n */\nasync function preCalculateSimulation() {\n    try {\n        console.log('Starting automatic pre-calculation...');\n        \n        // Ensure clean state before starting pre-calculation\n        particleSimulator.isPreCalculating = false;\n        particleSimulator.preCalculatedData.isGenerated = false;\n        \n        // Update play button to show calculation status\n        if (playPauseBtnBottom) {\n            playPauseBtnBottom.disabled = true;\n            playPauseBtnBottom.classList.add('loading');\n            playPauseBtnBottom.textContent = '0%';\n        }\n        \n        // Show progress updates\n        const progressCallback = (progress) => {\n            console.log(`Pre-calculation progress: ${progress.toFixed(1)}%`);\n            if (playPauseBtnBottom) {\n                playPauseBtnBottom.textContent = `${Math.round(progress)}%`;\n            }\n        };\n        \n        // Run the pre-calculation\n        const result = await particleSimulator.preCalculateSimulation(progressCallback);\n        \n        // Check if pre-calculation was cancelled\n        if (!result) {\n            console.log('Pre-calculation was cancelled');\n            if (playPauseBtnBottom) {\n                playPauseBtnBottom.disabled = false;\n                playPauseBtnBottom.classList.remove('loading');\n                playPauseBtnBottom.textContent = '▶';\n            }\n            return;\n        }\n        \n        console.log('Pre-calculation completed successfully');\n        \n        // Update parameter display with calculated velocity\n        updateParameterDisplay();\n        \n        // Reset play button and start simulation\n        if (playPauseBtnBottom) {\n            playPauseBtnBottom.disabled = false;\n            playPauseBtnBottom.classList.remove('loading');\n            playPauseBtnBottom.textContent = '⏸';\n        }\n        \n        // Switch to playback mode and start playback\n        particleSimulator.switchToPlaybackMode();\n        particleSimulator.playPlayback();\n        \n        // Update playback controls\n        updatePlaybackControlsState();\n        \n        // Start appropriate renderers\n        updateViewMode();\n        \n        // Start the playback animation\n        appState.isSimulationRunning = true;\n        startSimulationLoop();\n        \n        console.log('Pre-calculation and playback startup complete');\n        \n    } catch (error) {\n        console.error('Pre-calculation failed:', error);\n        if (playPauseBtnBottom) {\n            playPauseBtnBottom.classList.remove('loading');\n            playPauseBtnBottom.textContent = '▶';\n            playPauseBtnBottom.disabled = false;\n        }\n        // Make sure to reset the pre-calculation flag on error\n        if (particleSimulator) {\n            particleSimulator.isPreCalculating = false;\n        }\n    }\n}\n\n/**\n * Switch simulation mode between live and playback\n */\n\n\n/**\n * Update simulation parameters from UI controls\n */\nfunction updateSimulationParameters() {\n    // Check if simulation is currently running - if so, we need to reset and restart\n    const wasRunning = appState.isSimulationRunning;\n    \n    // Update mathematical simulation (for plots)\n    simulationEngine.updateSubstrateConcentration(appState.parameters.substrate);\n    simulationEngine.updateEnzymeConcentration(appState.parameters.enzyme);\n    simulationEngine.updateInhibitorConcentration(appState.parameters.inhibitor);\n    simulationEngine.updateInhibitionType(appState.parameters.inhibitionType);\n    \n            // Update particle simulation (for molecular animation)\n        const inhibitionTypeMap = {\n            'none': 'None',\n            'competitive': 'Competitive',\n            'uncompetitive': 'Un-competitive',\n            'noncompetitive': 'Non-competitive'\n        };\n        \n        // Get current canvas dimensions for accurate simulation bounds\n        // Only update canvas dimensions if molecular canvas is visible, otherwise keep existing\n        const canvasRect = molecularCanvas.getBoundingClientRect();\n        const shouldUpdateCanvasDimensions = canvasRect.width > 0 && canvasRect.height > 0;\n        \n        const parameterUpdate = {\n            S_concentration: appState.parameters.substrate,\n            E_concentration: appState.parameters.enzyme,\n            I_concentration: appState.parameters.inhibitor,\n            inhibitor_type: inhibitionTypeMap[appState.parameters.inhibitionType] || 'None'\n        };\n        \n        // Only update canvas dimensions if molecular canvas is currently visible and has real dimensions\n        if (shouldUpdateCanvasDimensions) {\n            parameterUpdate.canvas_width = Math.max(canvasRect.width, 300);\n            parameterUpdate.canvas_height = Math.max(canvasRect.height, 200);\n            console.log(`Updating canvas dimensions from visible molecular canvas: ${parameterUpdate.canvas_width}x${parameterUpdate.canvas_height}`);\n        } else {\n            console.log('Molecular canvas hidden or zero-sized, preserving existing canvas dimensions');\n        }\n        \n        particleSimulator.setParameters(parameterUpdate);\n    \n    // Update inhibitor slider state\n    inhibitorSlider.disabled = appState.parameters.inhibitionType === 'none';\n    if (appState.parameters.inhibitionType === 'none') {\n        appState.parameters.inhibitor = 0.0;\n        inhibitorSlider.value = 0.0;\n        inhibitorValue.textContent = '0.0 mM';\n        simulationEngine.updateInhibitorConcentration(0.0);\n        particleSimulator.setParameters({\n            I_concentration: 0.0,\n            inhibitor_type: 'None'\n        });\n    }\n    \n    // Always reset to initial frame when parameters change (no auto-restart)\n    if (wasRunning) {\n        console.log('Parameters changed during simulation - stopping and resetting to initial frame');\n        resetSimulation();\n        // Don't automatically restart - user must press play button explicitly\n    } else {\n        // Just reset and show initial frame\n        resetSimulation();\n    }\n}\n\n/**\n * Update kinetic parameter display\n */\nfunction updateParameterDisplay() {\n    // Get current product count from particle simulator (10 particles = 1 mM)\n    const particleSummary = particleSimulator.getSummary();\n    const productParticles = particleSummary.P || 0;\n    const productConcentration = productParticles / 10; // 10 particles = 1 mM\n    \n    // Get velocity - calculate real-time velocity based on current simulation state\n    let velocity = 0; // Default to 0 (no simulation data)\n    if (particleSimulator.preCalculatedData.isGenerated) {\n        // Get current time and calculate velocity at current point\n        const currentTime = particleSimulator.playbackState.currentTime;\n        if (currentTime > 0 && productParticles > 0) {\n            // Same calculation as export: (product particles × 0.1 mM/particle) / elapsed time\n            velocity = (productParticles * 0.1) / currentTime; // mM/ms\n        }\n    }\n    \n    currentVelocity.textContent = `${velocity.toFixed(4)} mM·ms⁻¹`;\n    currentProduct.textContent = `${productConcentration.toFixed(1)} mM`;\n}\n\n/**\n * Update view mode based on current selection\n */\nfunction updateViewMode() {\n    // Set flag to prevent reset during view switching and track timing\n    appState.isSwitchingViews = true;\n    appState.lastViewSwitchTime = performance.now();\n    console.log(`Switching to view: ${appState.currentView}, simulation running: ${appState.isSimulationRunning}`);\n    \n    // Notify renderers about the view switch to prevent unnecessary resets\n    if (molecularRenderer) {\n        molecularRenderer.notifyViewSwitch();\n    }\n    if (plotRenderer) {\n        plotRenderer.notifyViewSwitch();\n    }\n    \n    // Determine timing based on screen size and object count for better stability\n    const screenWidth = window.innerWidth;\n    const objectCount = particleSimulator ? particleSimulator.objects.length : 0;\n    let initialDelay, clearDelay, deviceType;\n    \n    // Increase delays for high object counts to allow more time for operations\n    const objectCountMultiplier = Math.min(1.5, 1 + (objectCount / 1000)); // Scale up to 1.5x for high counts\n    \n    if (screenWidth <= 768) {\n        // Mobile devices - need longer delays\n        initialDelay = Math.round(100 * objectCountMultiplier);\n        clearDelay = Math.round(800 * objectCountMultiplier);\n        deviceType = 'mobile';\n    } else if (screenWidth <= 1200) {\n        // Mid-tablet range (the problematic range) - increased significantly\n        initialDelay = Math.round(75 * objectCountMultiplier);\n        clearDelay = Math.round(600 * objectCountMultiplier);\n        deviceType = 'tablet';\n    } else {\n        // Desktop/large screens - moderate increase\n        initialDelay = Math.round(50 * objectCountMultiplier);\n        clearDelay = Math.round(400 * objectCountMultiplier);\n        deviceType = 'desktop';\n    }\n    \n    console.log(`Device: ${deviceType} (${screenWidth}px), Objects: ${objectCount}, Delays: ${initialDelay}ms initial, ${clearDelay}ms protection`);\n    \n    // Hide all canvases initially\n    molecularCanvas.style.display = 'none';\n    plotsCanvas.style.display = 'none';\n    \n    // Stop any running animations\n    molecularRenderer.stopAnimation();\n    plotRenderer.stopAnimation();\n    \n    // Use responsive timing to ensure the flag is properly set before any resize operations\n    setTimeout(() => {\n        switch (appState.currentView) {\n            case 'molecular':\n                molecularCanvas.style.display = 'block';\n                // Add small delay to ensure CSS has applied before measuring canvas\n                setTimeout(() => {\n                    molecularRenderer.handleResize();\n                    \n                    // CRITICAL FIX: Update particle simulator canvas dimensions to match current canvas\n                    const canvasRect = molecularCanvas.getBoundingClientRect();\n                    const currentWidth = Math.max(canvasRect.width || 800, 300);\n                    const currentHeight = Math.max(canvasRect.height || 400, 200);\n                    \n                    particleSimulator.setParameters({\n                        canvas_width: currentWidth,\n                        canvas_height: currentHeight\n                    });\n                    \n                    console.log(`Updated particle simulator canvas dimensions: ${currentWidth}x${currentHeight}`);\n                    \n                    if (appState.isSimulationRunning) {\n                        // Preserve playback state when switching views\n                        molecularRenderer.startAnimation(particleSimulator);\n                    } else {\n                        // Show current frame state when not running\n                        setTimeout(() => {\n                            molecularRenderer.renderSingleFrame(particleSimulator);\n                        }, 10);\n                    }\n                }, 5); // Small delay to allow CSS to apply\n                break;\n                \n            case 'plots':\n                plotsCanvas.style.display = 'block';\n                // Add small delay to ensure CSS has applied before measuring canvas\n                setTimeout(() => {\n                    plotRenderer.handleResize();\n                    if (appState.isSimulationRunning) {\n                        // Preserve playback state when switching views\n                        // The renderer will handle loading data in its animation loop\n                        plotRenderer.startAnimation(particleSimulator);\n                    } else {\n                        // Show current plot state when not running\n                        // Try to load data first, then render\n                        setTimeout(() => {\n                            plotRenderer.loadSimulationData(particleSimulator);\n                            plotRenderer.render(particleSimulator, performance.now());\n                        }, 10);\n                    }\n                }, 5); // Small delay to allow CSS to apply\n                break;\n                \n\n            }\n        \n        // Clear the view switching flag after resize operations are complete\n        setTimeout(() => {\n            appState.isSwitchingViews = false;\n            appState.lastViewSwitchTime = performance.now(); // Update completion time\n            console.log('View switch complete - resize protection cleared');\n        }, clearDelay);\n    }, initialDelay);\n}\n\n/**\n * Update view mode button states\n */\nfunction updateViewModeButtons() {\n    // Remove active class from all buttons\n    molecularViewBtn.classList.remove('active');\n    plotsViewBtn.classList.remove('active');\n    \n    // Add active class to current view button\n    if (appState.currentView === 'molecular') {\n        molecularViewBtn.classList.add('active');\n    } else if (appState.currentView === 'plots') {\n        plotsViewBtn.classList.add('active');\n    }\n}\n\n/**\n * Start the simulation\n */\nasync function startSimulation() {\n    if (!simulationEngine || !particleSimulator || !molecularRenderer || !plotRenderer) {\n        console.error('Simulation components not properly initialized');\n        showErrorMessage('Simulation not ready. Please refresh the page.');\n        return;\n    }\n\n    appState.isSimulationRunning = true;\n    \n    // Ensure pre-calculation flag is properly reset before checking data availability\n    particleSimulator.isPreCalculating = false;\n    \n    // Always start in playback mode - auto pre-calculate if needed\n    if (!particleSimulator.preCalculatedData.isGenerated) {\n        console.log('No pre-calculated data available, starting pre-calculation...');\n        // First time playing - need to pre-calculate\n        await preCalculateSimulation();\n        return; // preCalculateSimulation will handle starting the animation\n    } else {\n        console.log('Using existing pre-calculated data for playback...');\n        // Data already exists, just resume playback from current position\n        // Don't call switchToPlaybackMode() as it resets time to 0\n        particleSimulator.playPlayback();\n        \n        // Start appropriate renderers\n        updateViewMode();\n        \n        // Start simulation loop\n        startSimulationLoop();\n        \n        // Update bottom video control button\n        if (playPauseBtnBottom) {\n            playPauseBtnBottom.innerHTML = '⏸';\n            playPauseBtnBottom.classList.remove('primary');\n            playPauseBtnBottom.classList.add('secondary');\n        }\n    }\n}\n\n/**\n * Pause the simulation\n */\nfunction pauseSimulation() {\n    appState.isSimulationRunning = false;\n    \n    if (simulationEngine) {\n        simulationEngine.pause();\n    }\n    if (particleSimulator) {\n        particleSimulator.pause();\n    }\n    \n    // Stop renderers\n    if (molecularRenderer) {\n        molecularRenderer.stopAnimation();\n    }\n    if (plotRenderer) {\n        plotRenderer.stopAnimation();\n    }\n    \n    // Update bottom video control button\n    if (playPauseBtnBottom) {\n        playPauseBtnBottom.innerHTML = '▶';\n        playPauseBtnBottom.classList.remove('secondary');\n        playPauseBtnBottom.classList.add('primary');\n    }\n}\n\n/**\n * Reset the simulation\n */\nfunction resetSimulation() {\n    // Pause first\n    pauseSimulation();\n    \n    // MEMORY LEAK FIX: Log memory usage before reset\n    if (performance.memory) {\n        const memBefore = Math.round(performance.memory.usedJSHeapSize / 1024 / 1024);\n        console.log(`Memory before reset: ${memBefore}MB`);\n    }\n    \n    // Reset simulation engines\n    simulationEngine.reset();\n    particleSimulator.reset();\n    \n    // Reset renderers\n    molecularRenderer.reset();\n    plotRenderer.reset();\n    \n    // Reset playback controls to start position\n    if (playbackTimeSliderBottom) {\n        playbackTimeSliderBottom.value = 0;\n    }\n    if (playbackTimeValueBottom) {\n        playbackTimeValueBottom.textContent = '0ms / 500ms';\n    }\n    \n    // Reset playback time in particle simulator\n    particleSimulator.setPlaybackTime(0);\n    \n    // Clear velocity profile chart data\n    window.velocityProfileData = null;\n    window.velocityProfileChartVisible = false;\n    if (toggleGraphBtn) {\n        toggleGraphBtn.textContent = 'Show Chart';\n    }\n    \n    // Show initial frame after reset\n    if (molecularRenderer && appState.currentView === 'molecular') {\n        molecularRenderer.renderSingleFrame(particleSimulator);\n    }\n    \n    // Update display\n    updateParameterDisplay();\n    \n    // Reset playback controls\n    updatePlaybackControlsState();\n    \n    // MEMORY LEAK FIX: Log memory usage after reset and force garbage collection\n    setTimeout(() => {\n        if (performance.memory) {\n            const memAfter = Math.round(performance.memory.usedJSHeapSize / 1024 / 1024);\n            console.log(`Memory after reset: ${memAfter}MB`);\n        }\n        // Suggest garbage collection (only works in development)\n        if (window.gc && typeof window.gc === 'function') {\n            window.gc();\n            console.log('Forced garbage collection (dev mode)');\n        }\n    }, 100);\n    \n    console.log('Simulation reset');\n}\n\n/**\n * Main simulation loop with proper timing\n */\nfunction startSimulationLoop() {\n    // Note: Simulation loop is now handled by individual renderers\n    // This ensures proper progress bar updates and state synchronization\n    // when switching between molecular and plot views\n    \n    // The renderers will call updateParameterDisplay() and updatePlaybackControlsState()\n    // directly in their animation loops to maintain proper synchronization\n    console.log('Simulation started - updates handled by active renderer');\n}\n\n/**\n * Export simulation data as CSV - uses actual particle simulation data\n */\nasync function exportSimulationData() {\n    const timestamp = Date.now();\n    \n    try {\n        // Show loading indicator with progress tracking\n        if (exportBtn) {\n            exportBtn.textContent = '0%';\n            exportBtn.disabled = true;\n            exportBtn.classList.add('loading');\n        }\n        \n        console.log('Preparing particle simulation data for export...');\n        \n        // MOBILE/TABLET FIX: Ensure canvas dimensions are current before export\n        const canvasRect = molecularCanvas.getBoundingClientRect();\n        if (canvasRect.width > 0 && canvasRect.height > 0) {\n            const currentWidth = Math.max(canvasRect.width, 300);\n            const currentHeight = Math.max(canvasRect.height, 200);\n            \n            particleSimulator.setParameters({\n                canvas_width: currentWidth,\n                canvas_height: currentHeight\n            });\n            \n            console.log(`Updated particle simulator canvas dimensions for export: ${currentWidth}x${currentHeight}`);\n        }\n        \n        // Save current state\n        const wasRunning = appState.isSimulationRunning;\n        if (wasRunning) {\n            pauseSimulation();\n        }\n        \n        // Ensure we have pre-calculated data (the same data that drives the animation)\n        if (!particleSimulator.preCalculatedData.isGenerated) {\n            console.log('Pre-calculating simulation data for export...');\n            \n            // MOBILE MEMORY FIX: Monitor memory usage and add timeout for mobile devices\n            const isMobileDevice = window.innerWidth < 768;\n            const memoryBefore = performance.memory ? Math.round(performance.memory.usedJSHeapSize / 1024 / 1024) : 0;\n            \n            if (isMobileDevice && memoryBefore > 50) {\n                console.warn(`High memory usage detected before export: ${memoryBefore}MB`);\n                // Force garbage collection if available (Chrome dev tools)\n                if (window.gc && typeof window.gc === 'function') {\n                    window.gc();\n                    console.log('Forced garbage collection before export');\n                }\n            }\n            \n            // Show progress updates on export button\n            const exportProgressCallback = (progress) => {\n                console.log(`Export pre-calculation progress: ${progress.toFixed(1)}%`);\n                if (exportBtn) {\n                    exportBtn.textContent = `${Math.round(progress)}%`;\n                }\n            };\n            \n            // Add timeout protection for mobile devices\n            const preCalculationPromise = particleSimulator.preCalculateSimulation(exportProgressCallback);\n            const timeoutMs = isMobileDevice ? 90000 : 60000; // 90s mobile, 60s desktop\n            \n            try {\n                await Promise.race([\n                    preCalculationPromise,\n                    new Promise((_, reject) => \n                        setTimeout(() => reject(new Error(`Pre-calculation timeout (${timeoutMs/1000}s) - device may have insufficient memory`)), timeoutMs)\n                    )\n                ]);\n            } catch (timeoutError) {\n                if (timeoutError.message.includes('timeout')) {\n                    throw new Error(`Export failed: ${timeoutError.message}. Try reducing substrate/enzyme concentrations or using a desktop device.`);\n                }\n                throw timeoutError;\n            }\n        }\n        \n        // Update button to show data processing phase\n        if (exportBtn) {\n            exportBtn.textContent = 'Processing...';\n        }\n        \n        // Get the averaged simulation data for CSV export (smoother, spike-free data)\n        const summaryData = particleSimulator.preCalculatedData.averagedData || particleSimulator.preCalculatedData.summaryData;\n        if (!summaryData || summaryData.length === 0) {\n            throw new Error('No simulation data available');\n        }\n        \n        console.log('Using averaged data for export:', summaryData.length, 'time points from', particleSimulator.preCalculatedData.individualRuns ? particleSimulator.preCalculatedData.individualRuns.length : 1, 'runs');\n        \n        // Initialize data storage\n        const exportData = [];\n        const scale_factor = 10; // 10 particles per mM concentration (same as particle simulator)\n        \n        // Get initial object counts (before any complexes form) - these stay constant as requested\n        const initialSubstrateObjects = Math.round(appState.parameters.substrate * scale_factor);\n        const initialEnzymeObjects = Math.round(appState.parameters.enzyme * scale_factor);\n        const initialInhibitorObjects = appState.parameters.inhibitionType === 'none' ? 0 : \n                                       Math.round(appState.parameters.inhibitor * scale_factor);\n        \n        // Generate data for 1-500ms with 1ms intervals (500 data points)\n        for (let time = 1; time <= 500; time++) {\n            // Find the closest summary data point for this time\n            let closestData = null;\n            let minTimeDiff = Infinity;\n            \n            for (const [dataTime, summary] of summaryData) {\n                const timeDiff = Math.abs(dataTime - time);\n                if (timeDiff < minTimeDiff) {\n                    minTimeDiff = timeDiff;\n                    closestData = summary;\n                }\n            }\n            \n            if (!closestData) {\n                // Fallback to initial state\n                closestData = {\n                    E: initialEnzymeObjects,\n                    S: initialSubstrateObjects,\n                    I: initialInhibitorObjects,\n                    P: 0,\n                    ES: 0,\n                    EI: 0,\n                    ESI: 0\n                };\n            }\n            \n            // Get current counts from actual simulation data\n            const freeSubstrate = closestData.S || 0;\n            const freeEnzyme = closestData.E || 0;\n            const freeInhibitor = closestData.I || 0;\n            const productObjects = closestData.P || 0;\n            const esComplexes = closestData.ES || 0;\n            const eiComplexes = closestData.EI || 0;\n            const esiComplexes = closestData.ESI || 0;\n            \n            // Calculate total counts including bound molecules (as requested)\n            // Substrate: free + bound in ES + bound in ESI\n            const substrateObjectCount = freeSubstrate + esComplexes + esiComplexes;\n            // Enzyme: free + bound in ES + bound in EI + bound in ESI  \n            const enzymeObjectCount = freeEnzyme + esComplexes + eiComplexes + esiComplexes;\n            // Inhibitor: free + bound in EI + bound in ESI\n            const inhibitorObjectCount = freeInhibitor + eiComplexes + esiComplexes;\n            \n            // Calculate concentrations (object_count / scale_factor)\n            const substrateConcentration = substrateObjectCount / scale_factor;\n            const enzymeConcentration = enzymeObjectCount / scale_factor;\n            const inhibitorConcentration = inhibitorObjectCount / scale_factor;\n            const productConcentration = productObjects / scale_factor;\n            \n            // Calculate velocity using the same method as the velocity indicator\n            // Use cumulative velocity calculation: total product formed / elapsed time\n            let velocity = 0;\n            if (time > 0 && productObjects > 0) {\n                // Same calculation as getFinalVelocity but for current time\n                velocity = (productObjects * 0.1) / time; // mM/ms\n            }\n            \n            // Add data point\n            exportData.push({\n                time: time,\n                substrateObjects: substrateObjectCount,\n                substrateConcentration: substrateConcentration.toFixed(3),\n                enzymeObjects: enzymeObjectCount,\n                enzymeConcentration: enzymeConcentration.toFixed(3),\n                inhibitorObjects: inhibitorObjectCount,\n                inhibitorConcentration: inhibitorConcentration.toFixed(3),\n                productObjects: productObjects,\n                productConcentration: productConcentration.toFixed(3),\n                velocity: velocity.toFixed(4)\n            });\n        }\n        \n        // Calculate average velocity from all data points\n        let totalVelocity = 0;\n        let validVelocityCount = 0;\n        \n        exportData.forEach(row => {\n            const velocity = parseFloat(row.velocity);\n            if (velocity > 0) {\n                totalVelocity += velocity;\n                validVelocityCount++;\n            }\n        });\n        \n        const averageVelocity = validVelocityCount > 0 ? (totalVelocity / validVelocityCount).toFixed(4) : \"0.0000\";\n        \n        // Create CSV content with average velocity column\n        let csvContent = \"time(ms),substrate(objects),substrate_concentration(mM),enzyme(objects),enzyme_concentration(mM),inhibitor(objects),inhibitor_concentration(mM),product(objects),product_concentration(mM),velocity,average_velocity\\n\";\n        \n        exportData.forEach((row, index) => {\n            // Only add average velocity value on the second row (index 0 is first data row)\n            const averageVelocityValue = index === 0 ? averageVelocity : \"\";\n            csvContent += `${row.time},${row.substrateObjects},${row.substrateConcentration},${row.enzymeObjects},${row.enzymeConcentration},${row.inhibitorObjects},${row.inhibitorConcentration},${row.productObjects},${row.productConcentration},${row.velocity},${averageVelocityValue}\\n`;\n        });\n        \n        // Download the file\n        downloadCSV(csvContent, `enzyme_export_data_${timestamp}.csv`);\n        \n        console.log(`Export completed - ${exportData.length} data points exported (1-500ms)`);\n        \n        // Restore original simulation state\n        if (wasRunning) {\n            startSimulation();\n        }\n        \n    } catch (error) {\n        console.error('Export failed:', error);\n        \n        // Provide mobile/tablet-specific error messages\n        const screenWidth = window.innerWidth;\n        const isMobileDevice = screenWidth < 768;\n        const isTabletDevice = screenWidth >= 768 && screenWidth < 1200;\n        let errorMessage = 'Export failed. ';\n        \n        if (error.message.includes('timeout')) {\n            errorMessage += error.message;\n        } else if (error.message.includes('memory') || error.message.includes('quota')) {\n            if (isMobileDevice) {\n                errorMessage += 'Insufficient memory on mobile device. Try reducing parameter values or use a desktop computer.';\n            } else if (isTabletDevice) {\n                errorMessage += 'Insufficient memory on tablet device. Try reducing parameter values or use a desktop computer.';\n            } else {\n                errorMessage += 'Insufficient memory. Try reducing parameter values.';\n            }\n        } else if (error.message.includes('No simulation data')) {\n            errorMessage += 'No simulation data available. Please run the simulation first.';\n        } else if (error.message.includes('Blob') || error.message.includes('download')) {\n            errorMessage += 'Download failed. Your browser may not support file downloads or storage is full.';\n        } else {\n            errorMessage += `Error: ${error.message}. Please try again.`;\n        }\n        \n        alert(errorMessage);\n    } finally {\n        // Restore export button\n        if (exportBtn) {\n            exportBtn.textContent = 'Export';\n            exportBtn.disabled = false;\n            exportBtn.classList.remove('loading');\n        }\n    }\n}\n\n/**\n * Helper function to download CSV data - mobile-compatible version using Blob\n */\nfunction downloadCSV(csvContent, filename) {\n    try {\n        // Use Blob API for mobile compatibility (no size limits like data: URIs)\n        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n        \n        // Check if browser supports Blob download\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n            // Internet Explorer/Edge\n            window.navigator.msSaveOrOpenBlob(blob, filename);\n        } else {\n            // Modern browsers including mobile\n            const url = URL.createObjectURL(blob);\n            const link = document.createElement(\"a\");\n            link.setAttribute(\"href\", url);\n            link.setAttribute(\"download\", filename);\n            link.style.visibility = 'hidden';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n            \n            // Clean up the object URL to free memory\n            setTimeout(() => URL.revokeObjectURL(url), 100);\n        }\n        console.log(`CSV export completed: ${filename} (${(blob.size / 1024 / 1024).toFixed(2)}MB)`);\n    } catch (error) {\n        console.error('CSV download failed:', error);\n        // Fallback to data URI for very small files only\n        if (csvContent.length < 1000000) { // 1MB limit\n            console.warn('Falling back to data URI method for small file');\n            const encodedUri = encodeURI(\"data:text/csv;charset=utf-8,\" + csvContent);\n            const link = document.createElement(\"a\");\n            link.setAttribute(\"href\", encodedUri);\n            link.setAttribute(\"download\", filename);\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        } else {\n            throw new Error('Export failed: File too large for mobile browser and Blob method failed');\n        }\n    }\n}\n\n/**\n * Set up all event listeners for controls\n */\nfunction setupEventListeners() {\n    // View mode controls\n    molecularViewBtn.addEventListener('click', () => {\n        appState.currentView = 'molecular';\n        updateViewModeButtons();\n        updateViewMode();\n        console.log('View mode changed to: molecular');\n    });\n    \n    plotsViewBtn.addEventListener('click', () => {\n        appState.currentView = 'plots';\n        updateViewModeButtons();\n        updateViewMode();\n        console.log('View mode changed to: plots');\n    });\n\n\n\n    // Substrate concentration control\n    // Update display during drag\n    substrateSlider.addEventListener('input', (e) => {\n        const concentration = parseFloat(e.target.value);\n        appState.parameters.substrate = concentration;\n        substrateValue.textContent = `${concentration.toFixed(1)} mM`;\n    });\n    \n    // Recalculate simulation only when drag ends\n    substrateSlider.addEventListener('change', (e) => {\n        const concentration = parseFloat(e.target.value);\n        updateSimulationParameters();\n        saveParametersToStorage(); // Save to localStorage\n        console.log(`Substrate concentration: ${concentration} mM`);\n    });\n\n    // Enzyme concentration control\n    // Update display during drag\n    enzymeSlider.addEventListener('input', (e) => {\n        const concentration = parseFloat(e.target.value);\n        appState.parameters.enzyme = concentration;\n        enzymeValue.textContent = `${concentration.toFixed(2)} mM`;\n    });\n    \n    // Recalculate simulation only when drag ends\n    enzymeSlider.addEventListener('change', (e) => {\n        const concentration = parseFloat(e.target.value);\n        updateSimulationParameters();\n        saveParametersToStorage(); // Save to localStorage\n        console.log(`Enzyme concentration: ${concentration} mM`);\n    });\n\n    // Inhibitor type controls\n    inhibitorTypeRadios.forEach(radio => {\n        radio.addEventListener('change', (e) => {\n            if (e.target.checked) {\n                appState.parameters.inhibitionType = e.target.value;\n                updateSimulationParameters();\n                saveParametersToStorage(); // Save to localStorage\n                console.log(`Inhibition type: ${e.target.value}`);\n            }\n        });\n    });\n\n    // Mobile inhibitor selector\n    if (inhibitorSelect) {\n        inhibitorSelect.addEventListener('change', (e) => {\n            appState.parameters.inhibitionType = e.target.value;\n            // Sync radio buttons\n            const radio = document.querySelector(`input[name=\"inhibitor-type\"][value=\"${e.target.value}\"]`);\n            if (radio) radio.checked = true;\n            updateSimulationParameters();\n            saveParametersToStorage(); // Save to localStorage\n        });\n    }\n\n    // Inhibitor concentration control\n    // Update display during drag\n    inhibitorSlider.addEventListener('input', (e) => {\n        const concentration = parseFloat(e.target.value);\n        appState.parameters.inhibitor = concentration;\n        inhibitorValue.textContent = `${concentration.toFixed(1)} mM`;\n    });\n    \n    // Recalculate simulation only when drag ends\n    inhibitorSlider.addEventListener('change', (e) => {\n        const concentration = parseFloat(e.target.value);\n        updateSimulationParameters();\n        saveParametersToStorage(); // Save to localStorage\n        console.log(`Inhibitor concentration: ${concentration} mM`);\n    });\n\n    // Export button\n    exportBtn.addEventListener('click', () => {\n        exportSimulationData();\n    });\n\n    // Generate velocity profile button\n    if (generateProfileBtn) {\n        generateProfileBtn.addEventListener('click', () => {\n            generateVelocityProfile();\n        });\n    }\n\n    // Toggle graph button\n    if (toggleGraphBtn) {\n        toggleGraphBtn.addEventListener('click', () => {\n            toggleVelocityGraph();\n        });\n    }\n    \n\n    \n\n\n    // Bottom control event listeners\n    if (playPauseBtnBottom) {\n        playPauseBtnBottom.addEventListener('click', () => {\n            if (appState.isSimulationRunning) {\n                pauseSimulation();\n            } else {\n                startSimulation();\n            }\n        });\n    }\n\n    if (resetBtnBottom) {\n        resetBtnBottom.addEventListener('click', () => {\n            resetSimulation();\n        });\n    }\n\n\n\n    if (playbackTimeSliderBottom) {\n        playbackTimeSliderBottom.addEventListener('input', (e) => {\n            const time = parseFloat(e.target.value);\n            particleSimulator.setPlaybackTime(time);\n            if (playbackTimeValueBottom) {\n                const totalTime = particleSimulator.preCalculatedData.totalDuration || 500;\n                const currentFormatted = formatTime(time);\n                const totalFormatted = formatTime(totalTime);\n                playbackTimeValueBottom.textContent = `${currentFormatted} / ${totalFormatted}`;\n            }\n        });\n    }\n    \n\n\n    // Window resize handler (ResizeObserver handles most cases, this is backup)\nwindow.addEventListener('resize', () => {\n    // Debounce window resize events\n    clearTimeout(window.resizeTimeout);\n    window.resizeTimeout = setTimeout(() => {\n        if (molecularRenderer) molecularRenderer.handleResize();\n        if (plotRenderer) plotRenderer.handleResize();\n        console.log('Window resize handled');\n    }, 100);\n});\n}\n\n/**\n * Initialize UI with default values\n */\nfunction initializeUI() {\n    // Set initial slider values\n    substrateSlider.value = appState.parameters.substrate;\n    substrateValue.textContent = `${appState.parameters.substrate.toFixed(1)} mM`;\n    \n    enzymeSlider.value = appState.parameters.enzyme;\n    enzymeValue.textContent = `${appState.parameters.enzyme.toFixed(2)} mM`;\n    \n    inhibitorSlider.value = appState.parameters.inhibitor;\n    inhibitorValue.textContent = `${appState.parameters.inhibitor.toFixed(1)} mM`;\n    \n    // Set initial radio selections\n    updateViewModeButtons();\n    \n    const selectedInhibitorRadio = document.querySelector(`input[name=\"inhibitor-type\"][value=\"${appState.parameters.inhibitionType}\"]`);\n    if (selectedInhibitorRadio) selectedInhibitorRadio.checked = true;\n    \n    // Mobile selectors\n    if (inhibitorSelect) inhibitorSelect.value = appState.parameters.inhibitionType;\n    \n    // Initialize velocity analysis button states\n    if (generateProfileBtn) {\n        generateProfileBtn.textContent = 'Generate Profile';\n        generateProfileBtn.disabled = false;\n    }\n    if (toggleGraphBtn) {\n        toggleGraphBtn.textContent = 'Show Chart';\n    }\n    \n    // Initialize video player controls\n    if (playbackTimeSliderBottom) {\n        playbackTimeSliderBottom.min = 0;\n        playbackTimeSliderBottom.max = 500;\n        playbackTimeSliderBottom.value = 0;\n        playbackTimeSliderBottom.step = 0.1;\n        playbackTimeSliderBottom.disabled = true;\n    }\n    if (playbackTimeValueBottom) {\n        playbackTimeValueBottom.textContent = '0ms / 500ms';\n    }\n    \n    console.log('UI initialized with default values');\n}\n\n/**\n * Generate velocity profile across substrate concentrations\n */\nasync function generateVelocityProfile() {\n    console.log('generateVelocityProfile called');\n    console.log('velocityProfileGenerator exists:', !!velocityProfileGenerator);\n    console.log('velocityProfileGenerator.isGeneratingProfile:', velocityProfileGenerator ? velocityProfileGenerator.isGeneratingProfile() : 'N/A');\n    console.log('particleSimulator exists:', !!particleSimulator);\n    \n    if (!velocityProfileGenerator) {\n        console.error('VelocityProfileGenerator not initialized');\n        alert('Velocity profile generator is not initialized. Please refresh the page and try again.');\n        return;\n    }\n    \n    if (velocityProfileGenerator.isGeneratingProfile()) {\n        console.warn('Velocity profile generation already in progress');\n        return;\n    }\n\n    try {\n        // Update button state\n        if (generateProfileBtn) {\n            generateProfileBtn.disabled = true;\n            generateProfileBtn.textContent = 'Generating...';\n        }\n\n        // Get current parameters (excluding substrate concentration)\n        const currentParams = {\n            E_concentration: appState.parameters.enzyme,\n            I_concentration: appState.parameters.inhibitor,\n            inhibitor_type: (() => {\n                const inhibitionTypeMap = {\n                    'none': 'None',\n                    'competitive': 'Competitive',\n                    'uncompetitive': 'Un-competitive',\n                    'noncompetitive': 'Non-competitive'\n                };\n                return inhibitionTypeMap[appState.parameters.inhibitionType] || 'None';\n            })(),\n            canvas_width: molecularCanvas.getBoundingClientRect().width || 800,\n            canvas_height: molecularCanvas.getBoundingClientRect().height || 400\n        };\n\n        // Progress callback\n        const progressCallback = (progress, currentSubstrate, velocity, runNumber = null) => {\n            try {\n                if (generateProfileBtn) {\n                    const runText = runNumber ? ` (Run ${runNumber}/2)` : '';\n                    generateProfileBtn.textContent = `Generating... ${progress.toFixed(0)}%${runText}`;\n                }\n                const runInfo = runNumber ? ` (Run ${runNumber}/2)` : '';\n                console.log(`Progress: ${progress.toFixed(1)}% - [S]: ${currentSubstrate} mM, V: ${velocity.toFixed(4)} mM/s${runInfo}`);\n            } catch (progressError) {\n                console.error('Error in progress callback:', progressError);\n            }\n        };\n\n        // Generate profile\n        console.log('Calling velocityProfileGenerator.generateVelocityProfile with params:', currentParams);\n        const profileData = await velocityProfileGenerator.generateVelocityProfile(currentParams, progressCallback);\n        console.log('Generation completed. Profile data:', profileData);\n\n        if (profileData && profileData.length > 0) {\n            // Store data globally for chart rendering\n            window.velocityProfileData = profileData;\n            window.velocityProfileChartVisible = true;\n            \n            // Update toggle button text\n            if (toggleGraphBtn) {\n                toggleGraphBtn.textContent = 'Hide Chart';\n            }\n\n            // Export CSV with descriptive filename including current settings\n            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n            \n            // Create descriptive filename with enzyme concentration, inhibitor type, and inhibitor concentration\n            const enzymeStr = `E${currentParams.E_concentration}mM`;\n            const inhibitorTypeStr = currentParams.inhibitor_type.replace(/[^a-zA-Z0-9]/g, ''); // Remove special chars\n            const inhibitorStr = currentParams.I_concentration > 0 ? `_I${currentParams.I_concentration}mM` : '';\n            \n            const filename = `velocity_profile_${enzymeStr}_${inhibitorTypeStr}${inhibitorStr}_${timestamp}.csv`;\n            velocityProfileGenerator.downloadCSV(filename);\n\n            // Auto-download velocity profile chart as PNG\n            const chartFilename = `velocity_profile_chart_${enzymeStr}_${inhibitorTypeStr}${inhibitorStr}_${timestamp}.png`;\n            if (molecularRenderer) {\n                molecularRenderer.exportVelocityChartAsPNG(chartFilename);\n            }\n\n            console.log(`Velocity profile generated with ${profileData.length} data points`);\n            console.log('Chart data stored globally');\n            console.log('Sample data points:', profileData.slice(0, 3));\n        }\n\n    } catch (error) {\n        console.error('Error generating velocity profile:', error);\n        console.error('Error stack:', error.stack);\n        console.error('Error message:', error.message);\n        \n        let errorMessage = 'Failed to generate velocity profile. ';\n        if (error.message) {\n            errorMessage += `Error: ${error.message}`;\n        } else {\n            errorMessage += 'Please check the console for details and try again.';\n        }\n        \n        alert(errorMessage);\n    } finally {\n        // Reset button state\n        if (generateProfileBtn) {\n            generateProfileBtn.disabled = false;\n            generateProfileBtn.textContent = 'Generate Profile';\n        }\n    }\n}\n\n/**\n * Toggle velocity chart visibility\n */\nfunction toggleVelocityGraph() {\n    // Check if there's data to show\n    if (!window.velocityProfileData || window.velocityProfileData.length === 0) {\n        console.warn('No velocity profile data available. Generate a profile first.');\n        return;\n    }\n\n    // Toggle visibility flag\n    window.velocityProfileChartVisible = !window.velocityProfileChartVisible;\n    \n    // Update button text\n    if (toggleGraphBtn) {\n        toggleGraphBtn.textContent = window.velocityProfileChartVisible ? 'Hide Chart' : 'Show Chart';\n    }\n    \n    console.log('Velocity chart toggled to:', window.velocityProfileChartVisible ? 'visible' : 'hidden');\n    \n    // Force canvas refresh to show/hide the chart\n    if (molecularRenderer && (appState.currentView === 'molecular' || appState.currentView === 'split')) {\n        if (appState.isSimulationRunning) {\n            // If simulation is running, the chart will update automatically in the next frame\n            console.log('Chart will update in next animation frame');\n        } else {\n            // If simulation is stopped, manually refresh the canvas\n            setTimeout(() => {\n                molecularRenderer.renderSingleFrame(particleSimulator);\n                console.log('Canvas manually refreshed to show chart changes');\n            }, 10);\n        }\n    }\n}\n\n/**\n * Test function to debug chart rendering\n */\nfunction testChartRendering() {\n    console.log('=== CHART DEBUG INFO ===');\n    console.log('velocityProfileData exists:', !!window.velocityProfileData);\n    console.log('velocityProfileData length:', window.velocityProfileData ? window.velocityProfileData.length : 'null');\n    console.log('velocityProfileChartVisible:', window.velocityProfileChartVisible);\n    console.log('Toggle button text:', toggleGraphBtn ? toggleGraphBtn.textContent : 'button not found');\n    console.log('App state - simulation running:', appState.isSimulationRunning);\n    console.log('App state - current view:', appState.currentView);\n    console.log('Molecular canvas exists:', !!molecularCanvas);\n    console.log('Molecular renderer exists:', !!molecularRenderer);\n    \n    // Test manual render\n    if (molecularRenderer && particleSimulator) {\n        console.log('Triggering manual render...');\n        molecularRenderer.renderSingleFrame(particleSimulator);\n    }\n    console.log('=======================');\n}\n\n// Make test function globally available\nwindow.testChartRendering = testChartRendering;\n\n/**\n * Main Application Initialization\n */\nfunction init() {\n    console.log('Michaelis-Menten Enzyme Kinetics Simulator - Starting...');\n    \n    try {\n        // Load saved parameters before initializing UI\n        loadParametersFromStorage();\n        \n        // Initialize UI first\n        initializeUI();\n        \n        // Update UI with loaded parameters\n        updateUIFromParameters();\n        \n        // Setup event listeners\n        setupEventListeners();\n    \n        // Initialize simulation (with error checking)\n        const simulationInitialized = initializeSimulation();\n        \n        if (simulationInitialized) {\n            console.log('Enzyme Kinetics Simulator - Ready!');\n        } else {\n            console.error('Failed to initialize simulation components');\n            // Show user-friendly error message\n            showErrorMessage('Failed to initialize simulation. Please refresh the page.');\n        }\n        \n    } catch (error) {\n        console.error('Failed to initialize enzyme kinetics simulator:', error);\n        showErrorMessage('Application failed to load. Please check the console for details.');\n    }\n}\n\n/**\n * Show error message to user\n */\nfunction showErrorMessage(message) {\n    const mainContent = document.getElementById('main-content');\n    if (mainContent) {\n        mainContent.innerHTML = `\n            <div style=\"\n                display: flex; \n                justify-content: center; \n                align-items: center; \n                height: 100%; \n                flex-direction: column;\n                text-align: center;\n                color: #e74c3c;\n                font-family: 'Nunito', sans-serif;\n            \">\n                <h2>⚠️ Error</h2>\n                <p>${message}</p>\n                <button onclick=\"location.reload()\" style=\"\n                    padding: 10px 20px;\n                    margin-top: 20px;\n                    background: #3c78d8;\n                    color: white;\n                    border: none;\n                    border-radius: 5px;\n                    cursor: pointer;\n                \">Refresh Page</button>\n            </div>\n        `;\n    }\n}\n\n// Expose functions globally for renderer access\nwindow.updatePlaybackControlsState = updatePlaybackControlsState;\nwindow.updateParameterDisplay = updateParameterDisplay;\n\n// MEMORY DEBUGGING: Expose memory stats function globally\nwindow.getSimulationMemoryStats = function() {\n    if (particleSimulator) {\n        const stats = particleSimulator.getMemoryStats();\n        console.log('=== SIMULATION MEMORY STATS ===');\n        console.log('Current objects:', stats.objectCount);\n        console.log('');\n        console.log('ESSENTIAL DATA (needed for functionality):');\n        console.log('  Time points:', stats.timePointsCount, '(needed for both views)');\n        console.log('  Particle data frames:', stats.particleDataCount, '(essential for molecular view)');\n        console.log('  Summary data frames:', stats.summaryDataCount, '(essential for plot view)');\n        console.log('  Averaged data frames:', stats.averagedDataCount, '(essential for CSV export)');\n        console.log('');\n        console.log('TEMPORARY DATA (cleared between sims):');\n        console.log('  Data log entries:', stats.dataLogTime + stats.dataLogMolecular + stats.dataLogSummary);\n        console.log('');\n        console.log('STATUS:');\n        console.log('  Pre-calculating:', stats.isPreCalculating);\n        console.log('  Data generated:', stats.isGenerated);\n        console.log('  Memory leak indicator:', stats.hasIndividualRuns ? '❌ LEAK DETECTED!' : '✅ No leak');\n        console.log('');\n        console.log('MEMORY USAGE:');\n        console.log('  Estimated simulation data:', stats.estimatedMemoryMB + 'MB');\n        if (performance.memory) {\n            const totalMemory = Math.round(performance.memory.usedJSHeapSize / 1024 / 1024);\n            console.log('  Total JS heap:', totalMemory + 'MB');\n        }\n        console.log('===============================');\n        return stats;\n    } else {\n        console.log('Particle simulator not available');\n        return null;\n    }\n};\n\n// Initialize when DOM is ready\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', init);\n} else {\ninit(); \n} "],"names":["SimulationEngine","S","I","E0","Vmax","velocity","KmApp_comp","inhibitionFactor_uncomp","inhibitionFactor_noncomp","baseVmax","state","ES","E","k1","kMinus1","k2","k1_scaled","dES_dt","dP_dt","dS_dt","h","currentState","derivs1","K1","state2","derivs2","K2","state3","derivs3","K3","state4","derivs4","K4","concentration","type","headers","rows","time","EnzymeKineticsSimulator","canvasWidth","scaleFactor","baseThreshold","params","hasSignificantChange","param","progressCallback","startTime","numRuns","allRuns","run","runData","duration","error","runIndex","totalRuns","stepCount","totalSteps","overallProgress","resolve","currentTime","particlesCopy","obj","summary","representativeRun","timePoints","averagedSummary","sum","validRuns","runSummary","targetTime","left","right","closestIndex","mid","midTime","currentDiff","_a","speed","deltaTime","scale_factor","num_S","num_E","num_I","i","angle","multiplier","obj1","obj2","threshold","bindingThreshold","dx","dy","dt","enzymes","substrates","inhibitors","complexes","complex","enzyme","substrate","inhibitor","complexType","complexAngle","complexSpeed","esComplex","esComponents","esComponentNames","type1","type2","angle1","angle2","baseSpeed","speedMap","speed1","speed2","esiComplex","enzymeAngle","enzymeSpeed","productAngle","productSpeed","speedVariation","currentSpeed","canvasHeight","boundary","currentObjects","stats","estimatedMemoryMB","originalTime","originalObjects","csvContent","particles","particle","point","x","y","objectName","row","MolecularRenderer","canvas","onResizeComplete","entries","entry","now","timeSinceLastViewSwitch","isGenuineResize","rect","width","height","constrainedCount","wasConstrained","currentIndex","processBatch","endIndex","label","colors","baseSizes","color","baseRadius","radius","gradient","particleSimulator","isMobile","panelWidth","panelHeight","fontSize","smallFontSize","panelX","panelY","totalTime","playing","timeText","playText","activeTypes","count","itemsPerRow","index","bgGradient","animate","data","chartWidth","chartHeight","chartX","chartY","plotX","plotY","plotWidth","plotHeight","maxSubstrate","d","maxVelocity","minVelocity","firstPoint","value","filename","exportCanvas","exportCtx","blob","url","link","PlotRenderer","summaryData","freeSubstrate","esComplexes","esiComplexes","productObjects","totalSubstrate","productConcentration","maxConcentration","existingPoint","p","a","b","dataX","dataY","screenX","screenY","xLabel","yLabel","ctx","leftX","rightX","topY","bottomY","xSteps","xValue","ySteps","yValue","xKey","yKey","screenPos","simulationEngine","points","s","tempState","tempEngine","items","legendX","legendY","lineHeight","item","currentS","currentV","currentPos","margins","currentTimeData","currentSubstrateData","currentProductData","baseMargins","timeData","concentrationData","isFirstPoint","prevX","prevY","cpX","cpY","timeSteps","concSteps","timeValue","concValue","legendItems","_b","VelocityProfileGenerator","currentParameters","originalParams","substrateConcentrations","completedSteps","substrateConc","testParams","velocities","progress","runError","averageVelocity","v","concentrationError","originalPlaybackState","timeframe","timeStep","steps","maxSteps","productCount","finalProductCount","values","mean","val","variance","dataPoint","individualVels","stdDev","appState","saveParametersToStorage","parametersToSave","loadParametersFromStorage","savedParameters","updateUIFromParameters","substrateSlider","substrateValue","enzymeSlider","enzymeValue","inhibitorTypeRadios","radio","inhibitorSelect","inhibitorSlider","inhibitorValue","molecularRenderer","plotRenderer","velocityProfileGenerator","molecularViewBtn","plotsViewBtn","exportBtn","generateProfileBtn","toggleGraphBtn","playPauseBtnBottom","resetBtnBottom","playbackTimeSliderBottom","playbackTimeValueBottom","molecularCanvas","plotsCanvas","currentVelocity","currentProduct","initializeSimulation","canvasRect","smartResizeCallback","resetSimulation","updateSimulationParameters","updateParameterDisplay","updateViewMode","initializePlaybackControls","updatePlaybackControlsState","formatTime","seconds","isDataReady","shouldEnable","currentFormatted","totalFormatted","preCalculateSimulation","startSimulationLoop","wasRunning","inhibitionTypeMap","shouldUpdateCanvasDimensions","parameterUpdate","productParticles","screenWidth","objectCount","initialDelay","clearDelay","deviceType","objectCountMultiplier","currentWidth","currentHeight","updateViewModeButtons","startSimulation","showErrorMessage","pauseSimulation","memBefore","memAfter","exportSimulationData","timestamp","isMobileDevice","memoryBefore","exportProgressCallback","preCalculationPromise","timeoutMs","_","reject","timeoutError","exportData","initialSubstrateObjects","initialEnzymeObjects","initialInhibitorObjects","closestData","minTimeDiff","dataTime","timeDiff","freeEnzyme","freeInhibitor","eiComplexes","substrateObjectCount","enzymeObjectCount","inhibitorObjectCount","substrateConcentration","enzymeConcentration","inhibitorConcentration","totalVelocity","validVelocityCount","averageVelocityValue","downloadCSV","isTabletDevice","errorMessage","encodedUri","setupEventListeners","e","generateVelocityProfile","toggleVelocityGraph","initializeUI","selectedInhibitorRadio","currentParams","currentSubstrate","runNumber","runText","runInfo","progressError","profileData","enzymeStr","inhibitorTypeStr","inhibitorStr","chartFilename","testChartRendering","init","message","mainContent","totalMemory"],"mappings":"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"}